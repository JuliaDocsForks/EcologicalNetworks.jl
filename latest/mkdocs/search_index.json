{
    "docs": [
        {
            "location": "/", 
            "text": "Analysis of ecological networks\n\n\nThe \nEcologicalNetwork\n package offers a convenient interface to analyse several types of ecological networks.\n\n\n\n\nInformations about types\n\n\nType hierarchy\n\n\nData types\n\n\nType reference\n\n\n\n\n\n\nDatasets\n\n\nUnipartite networks\n\n\nBipartite networks\n\n\n\n\n\n\nNull models\n\n\nCreating a deterministic network from a probabilistic network\n\n\nCreating a probabilistic network from a deterministic network\n\n\nNull model wrapper", 
            "title": "Home"
        }, 
        {
            "location": "/#analysis-of-ecological-networks", 
            "text": "The  EcologicalNetwork  package offers a convenient interface to analyse several types of ecological networks.   Informations about types  Type hierarchy  Data types  Type reference    Datasets  Unipartite networks  Bipartite networks    Null models  Creating a deterministic network from a probabilistic network  Creating a probabilistic network from a deterministic network  Null model wrapper", 
            "title": "Analysis of ecological networks"
        }, 
        {
            "location": "/man/types/", 
            "text": "Informations about types\n\n\nAs there are many ways to represent ecological networks, and the correct way to measure a given property varies in function of the representation, \nEcologicalNetwork\n has a series of built-in types.\n\n\n\n\nType hierarchy\n\n\nThe \nEcologicalNetwork\n package has four main types that are meant to be used by the user: \nBipartiteNetwork\n, \nBipartiteProbaNetwork\n, \nUnipartiteNetwork\n, and \nUnipartiteProbaNetwork\n. All types with \nProba\n in their names are meant to represent probabilistic networks, and are also part of the union type \nProbabilisticNetwork\n. All types \nwithout\n \nProba\n in their name are part of the union type \nDeterministicNetwork\n, and represent networks in which interactions are either present or absent. All types starting with \nBipartite\n are also part of the abstract type \nBipartite\n, and types with \nUnipartite\n in their names are part of the abstract type \nUnipartite\n. Finally, both \nUnipartite\n and \nBipartite\n are part of the abstract type \nEcoNetwork\n.\n\n\nAlthough this may seem convoluted, this is important to understand: when writing functions, you can restrict them to any type of network you want by using the right type in their declaration. You can also check properties of a network just by looking at its type. For example, one can check whether a network \nN\n is bipartite with:\n\n\ntypeof\n(\nN\n)\n \n:\n \nBipartite\n\n\n\n\n\n\nNetworks are represented as two-dimensional matrices. All types are simply wrappers around an adjacency matrix, stored as the \nA\n property of the object. To look at the adjacency matrix of a network \nN\n, one therefore uses \nN.A\n. These matrices must be read as: the existence/probability of an interaction \nfrom\n the species of the \ni\n-th row \nto\n the species in the \nj\n-th column. This implies that the networks are, by default, directed.\n\n\n\n\nData types\n\n\nInteractions in deterministic networks are represented as boolean (\ntrue\n/\nfalse\n) values. This is memory efficient, so large networks can be represented (one interactions represented as a boolean uses 8 times fewer memory than the same interaction represented as an integer). This being said, all networks of the \nDeterministicNetwork\n type can be read from matrices of integers, \nas long as these matrices only contain 0 and 1\n.\n\n\nIn probabilistic networks, interactions are stored as floating point (\nFloat64\n) numbers. These values have to be between 0.0 and 1.0, as they represent probabilities.\n\n\nNetworks of the \nUnipartite\n class must have the same number of rows and columns. The species in the rows and columns are the same. Networks of the \nBipartite\n class are expected to have different numbers of rows and columns, as the species in rows and columns are different species. It is possible to convert a network from \nBipartite\n to \nUnipartite\n using the \nmake_unipartite\n function:\n\n\nB\n \n=\n \nBipartiteNetwork\n(\nrand\n(\nBool\n,\n \n(\n3\n,\n \n5\n)))\n\n\nrichnes\n(\nB\n)\n \n# 8\n\n\nU\n \n=\n \nmake_unipartite\n(\nB\n)\n\n\nrichness\n(\nU\n)\n \n# 8\n\n\n\n\n\n\nThe documentation for \nmake_unipartite\n gives additional explanations about how the conversion is done. In the overwhelming majority of cases, applying any measure to a bipartite network, and to the same network made unipartite, should give the same results (connectance is one notable example).\n\n\n\n\nType reference", 
            "title": "Types"
        }, 
        {
            "location": "/man/types/#informations-about-types", 
            "text": "As there are many ways to represent ecological networks, and the correct way to measure a given property varies in function of the representation,  EcologicalNetwork  has a series of built-in types.", 
            "title": "Informations about types"
        }, 
        {
            "location": "/man/types/#type-hierarchy", 
            "text": "The  EcologicalNetwork  package has four main types that are meant to be used by the user:  BipartiteNetwork ,  BipartiteProbaNetwork ,  UnipartiteNetwork , and  UnipartiteProbaNetwork . All types with  Proba  in their names are meant to represent probabilistic networks, and are also part of the union type  ProbabilisticNetwork . All types  without   Proba  in their name are part of the union type  DeterministicNetwork , and represent networks in which interactions are either present or absent. All types starting with  Bipartite  are also part of the abstract type  Bipartite , and types with  Unipartite  in their names are part of the abstract type  Unipartite . Finally, both  Unipartite  and  Bipartite  are part of the abstract type  EcoNetwork .  Although this may seem convoluted, this is important to understand: when writing functions, you can restrict them to any type of network you want by using the right type in their declaration. You can also check properties of a network just by looking at its type. For example, one can check whether a network  N  is bipartite with:  typeof ( N )   :   Bipartite   Networks are represented as two-dimensional matrices. All types are simply wrappers around an adjacency matrix, stored as the  A  property of the object. To look at the adjacency matrix of a network  N , one therefore uses  N.A . These matrices must be read as: the existence/probability of an interaction  from  the species of the  i -th row  to  the species in the  j -th column. This implies that the networks are, by default, directed.", 
            "title": "Type hierarchy"
        }, 
        {
            "location": "/man/types/#data-types", 
            "text": "Interactions in deterministic networks are represented as boolean ( true / false ) values. This is memory efficient, so large networks can be represented (one interactions represented as a boolean uses 8 times fewer memory than the same interaction represented as an integer). This being said, all networks of the  DeterministicNetwork  type can be read from matrices of integers,  as long as these matrices only contain 0 and 1 .  In probabilistic networks, interactions are stored as floating point ( Float64 ) numbers. These values have to be between 0.0 and 1.0, as they represent probabilities.  Networks of the  Unipartite  class must have the same number of rows and columns. The species in the rows and columns are the same. Networks of the  Bipartite  class are expected to have different numbers of rows and columns, as the species in rows and columns are different species. It is possible to convert a network from  Bipartite  to  Unipartite  using the  make_unipartite  function:  B   =   BipartiteNetwork ( rand ( Bool ,   ( 3 ,   5 )))  richnes ( B )   # 8  U   =   make_unipartite ( B )  richness ( U )   # 8   The documentation for  make_unipartite  gives additional explanations about how the conversion is done. In the overwhelming majority of cases, applying any measure to a bipartite network, and to the same network made unipartite, should give the same results (connectance is one notable example).", 
            "title": "Data types"
        }, 
        {
            "location": "/man/types/#type-reference", 
            "text": "", 
            "title": "Type reference"
        }, 
        {
            "location": "/man/data/", 
            "text": "Datasets\n\n\nEcologicalNetwork\n comes with a few datasets.\n\n\n\n\nUnipartite networks\n\n\n#\n\n\nEcologicalNetwork.stony\n \n \nFunction\n.\n\n\nStony food web from Thompson \n Townsend\n\n\nTaken from \nhttps://www.nceas.ucsb.edu/interactionweb/html/thomps_towns.html\n\n\nsource\n\n\n\n\nBipartite networks\n\n\n#\n\n\nEcologicalNetwork.ollerton\n \n \nFunction\n.\n\n\nFish-anemone interactions\n\n\nTaken from \nhttps://www.nceas.ucsb.edu/interactionweb/html/ollerton_et_al_2007.html\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.mcmullen\n \n \nFunction\n.\n\n\nPlant-flower visitor interactions in the Galapagos.\n\n\nTaken from \nhttps://www.nceas.ucsb.edu/interactionweb/html/mc_mullen.html\n\n\nsource", 
            "title": "Data"
        }, 
        {
            "location": "/man/data/#datasets", 
            "text": "EcologicalNetwork  comes with a few datasets.", 
            "title": "Datasets"
        }, 
        {
            "location": "/man/data/#unipartite-networks", 
            "text": "#  EcologicalNetwork.stony     Function .  Stony food web from Thompson   Townsend  Taken from  https://www.nceas.ucsb.edu/interactionweb/html/thomps_towns.html  source", 
            "title": "Unipartite networks"
        }, 
        {
            "location": "/man/data/#bipartite-networks", 
            "text": "#  EcologicalNetwork.ollerton     Function .  Fish-anemone interactions  Taken from  https://www.nceas.ucsb.edu/interactionweb/html/ollerton_et_al_2007.html  source  #  EcologicalNetwork.mcmullen     Function .  Plant-flower visitor interactions in the Galapagos.  Taken from  https://www.nceas.ucsb.edu/interactionweb/html/mc_mullen.html  source", 
            "title": "Bipartite networks"
        }, 
        {
            "location": "/man/nullmodels/", 
            "text": "Null models\n\n\nEcologicalNetwork\n offers a number of ways to draw random binary networks from a template of probabilities. This is useful to generate networks under a null model, for example. All these functions will respect the fact that the network in bipartite or unipartite.\n\n\n\n\nCreating a deterministic network from a probabilistic network\n\n\nThere are a number of ways to generate a deterministic network from a probabilistic one. All of these functions take a network on a class belonging to \nProbabilisticNetwork\n, and return a network of a class belonging to \nDeterministicNetwork\n.\n\n\n\n\nConvert to deterministic\n\n\nThe first is simply to assing \ntrue\n to all interactions with a non-0 probability, and \nfalse\n to the others. This is done with the \nmake_binary\n function:\n\n\nN\n \n=\n \nUnipartiteProbaNetwork\n(\neye\n(\n3\n))\n\n\nB\n \n=\n \nmake_binary\n(\nN\n)\n\n\nB\n.\nA\n\n\n\n\n\n\n3\u00d73 Array{Bool,2}:\n  true  false  false\n false   true  false\n false  false   true\n\n\n\n\n\n#\n\n\nEcologicalNetwork.make_binary\n \n \nFunction\n.\n\n\nReturns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is greater than 0.\n\n\nsource\n\n\n\n\nUsing a threshold\n\n\nThe second way is to determine a cutoff for probabilities, below which they will be assigned \nfalse\n. This is done through \nmake_threshold\n:\n\n\nN\n \n=\n \nUnipartiteProbaNetwork\n(\nrand\n((\n4\n,\n \n4\n)))\n\n\nB\n \n=\n \nmake_threshold\n(\nN\n,\n \n0.5\n)\n\n\nB\n.\nA\n\n\n\n\n\n\n4\u00d74 Array{Bool,2}:\n false  false  true  false\n  true  false  true  false\n  true   true  true   true\n  true   true  true   true\n\n\n\n\n\n#\n\n\nEcologicalNetwork.make_threshold\n \n \nFunction\n.\n\n\nReturns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is \n \nk\n. This is probably unwise to use this function since this practice is of questionnable relevance, but it is included for the sake of exhaustivity.\n\n\nk\n must be in [0;1[.\n\n\nsource\n\n\n\n\nRandom draws\n\n\nThe last way to convert a probabilistic network to a deterministic one is to perform one random draw for each interaction. In this scenario, \ntrue\n is assigned with a probability $P_{ij}$. This is done with the \nmake_bernoulli\n function:\n\n\nN\n \n=\n \nBipartiteProbaNetwork\n(\nrand\n((\n4\n,\n \n4\n)))\n\n\nB\n \n=\n \nmake_bernoulli\n(\nN\n)\n\n\nB\n.\nA\n\n\n\n\n\n\n4\u00d74 Array{Bool,2}:\n  true  false   true  false\n  true  false  false  false\n false   true   true   true\n false  false  false   true\n\n\n\n\n\n#\n\n\nEcologicalNetwork.make_bernoulli\n \n \nFunction\n.\n\n\nReturns a matrix B of the same size as A, in which each element B(i,j) is 1 with probability A(i,j).\n\n\nsource\n\n\n\n\nCreating a probabilistic network from a deterministic network\n\n\nThe inverse operation can be done using the \nnullX\n functions. These functions use informations about the degree distribution to generate probabilistic networks:\n\n\n#\n\n\nEcologicalNetwork.null1\n \n \nFunction\n.\n\n\nGiven a matrix \nA\n, \nnull1(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the connectance of \nA\n.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.null2\n \n \nFunction\n.\n\n\nGiven a matrix \nA\n, \nnull2(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the degree of each species.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.null3in\n \n \nFunction\n.\n\n\nGiven a matrix \nA\n, \nnull3in(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the in-degree (number of predecessors) of each species, divided by the total number of possible predecessors.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.null3out\n \n \nFunction\n.\n\n\nGiven a matrix \nA\n, \nnull3out(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the out-degree (number of successors) of each species, divided by the total number of possible successors.\n\n\nsource\n\n\nFor an example:\n\n\nN\n \n=\n \nmake_bernoulli\n(\nBipartiteProbaNetwork\n(\nrand\n(\n3\n,\n \n5\n)))\n\n\nnull2\n(\nN\n)\n.\nA\n\n\n\n\n\n\n3\u00d75 Array{Float64,2}:\n 0.366667  0.533333  0.2  0.366667  0.2\n 0.366667  0.533333  0.2  0.366667  0.2\n 0.166667  0.333333  0.0  0.166667  0.0\n\n\n\n\n\n\n\nNull model wrapper\n\n\nEcologicalNetwork\n has a wrapper to generate an arbitrary number of Bernoulli networks from a probability matrix. This approach is encourage over simply generating your own networks, because the wrapper will make sure that all networks have no species without any interactions. This ensures that the networks have the same size.\n\n\nFor example, we can generate a hundred replicates from the \nstony\n food web dataset, using the type 2 model:\n\n\ntemplate\n \n=\n \nnull2\n(\nstony\n())\n\n\n\n# Generate up to 100 networks\n\n\nN\n \n=\n \nnullmodel\n(\ntemplate\n,\n \nn\n=\n100\n,\n \nmax\n=\n1000\n)\n\n\n\n# Average connectance\n\n\nmean\n(\nmap\n(\nconnectance\n,\n \nN\n))\n\n\n\n\n\n\n0.06468400031325867\n\n\n\n\n\nIt must be noted that the number of networks returned by \nnullmodel\n may be \nlower\n than the requested number of networks. This is because of the constraint on the fact that no species can end up without interactions. When this constrained is enforced, some networks have very low success rates. This can be measured using the \nspecies_is_free\n function:\n\n\ntemplate\n \n=\n \nnull2\n(\nmcmullen\n())\n\n\n\n# Probability that every species has at least one interaction\n\n\nat_least_one\n \n=\n \n1.\n-\nspecies_is_free\n(\nmake_unipartite\n(\ntemplate\n))\n\n\n\n# Probability that a randomized network has no unconnected species\n\n\nprod\n(\nat_least_one\n)\n\n\n\n\n\n\n1.1674941263628132e-10\n\n\n\n\n\n#\n\n\nEcologicalNetwork.nullmodel\n \n \nFunction\n.\n\n\nThis function is a wrapper to generate replicated binary matrices from a template probability matrix \nA\n.\n\n\nIf you use julia on more than one CPU, \ni.e.\n if you started it with \njulia -p k\n where \nk\n is more than 1, this function will distribute each trial to one worker. Which means that it's fast.\n\n\nKeyword arguments\n\n\n\n\nn\n (def. 1000), number of replicates to generate\n\n\nmax\n (def. 10000), number of trials to make\n\n\n\n\nsource", 
            "title": "Null models"
        }, 
        {
            "location": "/man/nullmodels/#null-models", 
            "text": "EcologicalNetwork  offers a number of ways to draw random binary networks from a template of probabilities. This is useful to generate networks under a null model, for example. All these functions will respect the fact that the network in bipartite or unipartite.", 
            "title": "Null models"
        }, 
        {
            "location": "/man/nullmodels/#creating-a-deterministic-network-from-a-probabilistic-network", 
            "text": "There are a number of ways to generate a deterministic network from a probabilistic one. All of these functions take a network on a class belonging to  ProbabilisticNetwork , and return a network of a class belonging to  DeterministicNetwork .", 
            "title": "Creating a deterministic network from a probabilistic network"
        }, 
        {
            "location": "/man/nullmodels/#convert-to-deterministic", 
            "text": "The first is simply to assing  true  to all interactions with a non-0 probability, and  false  to the others. This is done with the  make_binary  function:  N   =   UnipartiteProbaNetwork ( eye ( 3 ))  B   =   make_binary ( N )  B . A   3\u00d73 Array{Bool,2}:\n  true  false  false\n false   true  false\n false  false   true  #  EcologicalNetwork.make_binary     Function .  Returns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is greater than 0.  source", 
            "title": "Convert to deterministic"
        }, 
        {
            "location": "/man/nullmodels/#using-a-threshold", 
            "text": "The second way is to determine a cutoff for probabilities, below which they will be assigned  false . This is done through  make_threshold :  N   =   UnipartiteProbaNetwork ( rand (( 4 ,   4 )))  B   =   make_threshold ( N ,   0.5 )  B . A   4\u00d74 Array{Bool,2}:\n false  false  true  false\n  true  false  true  false\n  true   true  true   true\n  true   true  true   true  #  EcologicalNetwork.make_threshold     Function .  Returns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is    k . This is probably unwise to use this function since this practice is of questionnable relevance, but it is included for the sake of exhaustivity.  k  must be in [0;1[.  source", 
            "title": "Using a threshold"
        }, 
        {
            "location": "/man/nullmodels/#random-draws", 
            "text": "The last way to convert a probabilistic network to a deterministic one is to perform one random draw for each interaction. In this scenario,  true  is assigned with a probability $P_{ij}$. This is done with the  make_bernoulli  function:  N   =   BipartiteProbaNetwork ( rand (( 4 ,   4 )))  B   =   make_bernoulli ( N )  B . A   4\u00d74 Array{Bool,2}:\n  true  false   true  false\n  true  false  false  false\n false   true   true   true\n false  false  false   true  #  EcologicalNetwork.make_bernoulli     Function .  Returns a matrix B of the same size as A, in which each element B(i,j) is 1 with probability A(i,j).  source", 
            "title": "Random draws"
        }, 
        {
            "location": "/man/nullmodels/#creating-a-probabilistic-network-from-a-deterministic-network", 
            "text": "The inverse operation can be done using the  nullX  functions. These functions use informations about the degree distribution to generate probabilistic networks:  #  EcologicalNetwork.null1     Function .  Given a matrix  A ,  null1(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the connectance of  A .  source  #  EcologicalNetwork.null2     Function .  Given a matrix  A ,  null2(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the degree of each species.  source  #  EcologicalNetwork.null3in     Function .  Given a matrix  A ,  null3in(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the in-degree (number of predecessors) of each species, divided by the total number of possible predecessors.  source  #  EcologicalNetwork.null3out     Function .  Given a matrix  A ,  null3out(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the out-degree (number of successors) of each species, divided by the total number of possible successors.  source  For an example:  N   =   make_bernoulli ( BipartiteProbaNetwork ( rand ( 3 ,   5 )))  null2 ( N ) . A   3\u00d75 Array{Float64,2}:\n 0.366667  0.533333  0.2  0.366667  0.2\n 0.366667  0.533333  0.2  0.366667  0.2\n 0.166667  0.333333  0.0  0.166667  0.0", 
            "title": "Creating a probabilistic network from a deterministic network"
        }, 
        {
            "location": "/man/nullmodels/#null-model-wrapper", 
            "text": "EcologicalNetwork  has a wrapper to generate an arbitrary number of Bernoulli networks from a probability matrix. This approach is encourage over simply generating your own networks, because the wrapper will make sure that all networks have no species without any interactions. This ensures that the networks have the same size.  For example, we can generate a hundred replicates from the  stony  food web dataset, using the type 2 model:  template   =   null2 ( stony ())  # Generate up to 100 networks  N   =   nullmodel ( template ,   n = 100 ,   max = 1000 )  # Average connectance  mean ( map ( connectance ,   N ))   0.06468400031325867  It must be noted that the number of networks returned by  nullmodel  may be  lower  than the requested number of networks. This is because of the constraint on the fact that no species can end up without interactions. When this constrained is enforced, some networks have very low success rates. This can be measured using the  species_is_free  function:  template   =   null2 ( mcmullen ())  # Probability that every species has at least one interaction  at_least_one   =   1. - species_is_free ( make_unipartite ( template ))  # Probability that a randomized network has no unconnected species  prod ( at_least_one )   1.1674941263628132e-10  #  EcologicalNetwork.nullmodel     Function .  This function is a wrapper to generate replicated binary matrices from a template probability matrix  A .  If you use julia on more than one CPU,  i.e.  if you started it with  julia -p k  where  k  is more than 1, this function will distribute each trial to one worker. Which means that it's fast.  Keyword arguments   n  (def. 1000), number of replicates to generate  max  (def. 10000), number of trials to make   source", 
            "title": "Null model wrapper"
        }, 
        {
            "location": "/lib/public/", 
            "text": "Public Documentation\n\n\nDocumentation for EcologicalNetwork's public (exported) interface.\n\n\nSee \nInternal Documentation\n for documentation on internal functions.\n\n\n\n\nIndex\n\n\n\n\nEcologicalNetwork.Bipartite\n\n\nEcologicalNetwork.BipartiteNetwork\n\n\nEcologicalNetwork.BipartiteNetwork\n\n\nEcologicalNetwork.EcoNetwork\n\n\nEcologicalNetwork.Partition\n\n\nEcologicalNetwork.Partition\n\n\nEcologicalNetwork.Partition\n\n\nEcologicalNetwork.Unipartite\n\n\nEcologicalNetwork.UnipartiteNetwork\n\n\nEcologicalNetwork.UnipartiteNetwork\n\n\n\n\n\n\nFunctions\n\n\n\n\nTypes\n\n\n#\n\n\nEcologicalNetwork.Bipartite\n \n \nType\n.\n\n\nBipartite type\n\n\nAll bipartite networks\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.BipartiteNetwork\n \n \nType\n.\n\n\nBipartiteNetwork\n\n\nA bipartite deterministic network.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.BipartiteNetwork\n \n \nMethod\n.\n\n\nConstruct a bipartite network from a matrix of integer\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.EcoNetwork\n \n \nType\n.\n\n\nEcoNetwork type\n\n\nThis is an abstract type that allows to generate functions for all sorts of networks. All other types are derived from this one.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.Partition\n \n \nType\n.\n\n\nType to store a community partition\n\n\nThis type has three elements:\n\n\n\n\nN\n, the network\n\n\nL\n, the array of (integers) module labels\n\n\nQ\n, if needed, the modularity value\n\n\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.Partition\n \n \nMethod\n.\n\n\nConstructor for the \nPartition\n type\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.Partition\n \n \nMethod\n.\n\n\nConstructor for the \nPartition\n type\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.Unipartite\n \n \nType\n.\n\n\nUnipartite type\n\n\nAll unipartite networks\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.UnipartiteNetwork\n \n \nType\n.\n\n\nUnipartiteNetwork\n\n\nAn unipartite deterministic network.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.UnipartiteNetwork\n \n \nMethod\n.\n\n\nConstruct an unipartite network from a matrix of integer\n\n\nsource", 
            "title": "Public"
        }, 
        {
            "location": "/lib/public/#public-documentation", 
            "text": "Documentation for EcologicalNetwork's public (exported) interface.  See  Internal Documentation  for documentation on internal functions.", 
            "title": "Public Documentation"
        }, 
        {
            "location": "/lib/public/#index", 
            "text": "EcologicalNetwork.Bipartite  EcologicalNetwork.BipartiteNetwork  EcologicalNetwork.BipartiteNetwork  EcologicalNetwork.EcoNetwork  EcologicalNetwork.Partition  EcologicalNetwork.Partition  EcologicalNetwork.Partition  EcologicalNetwork.Unipartite  EcologicalNetwork.UnipartiteNetwork  EcologicalNetwork.UnipartiteNetwork", 
            "title": "Index"
        }, 
        {
            "location": "/lib/public/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/lib/public/#types", 
            "text": "#  EcologicalNetwork.Bipartite     Type .  Bipartite type  All bipartite networks  source  #  EcologicalNetwork.BipartiteNetwork     Type .  BipartiteNetwork  A bipartite deterministic network.  source  #  EcologicalNetwork.BipartiteNetwork     Method .  Construct a bipartite network from a matrix of integer  source  #  EcologicalNetwork.EcoNetwork     Type .  EcoNetwork type  This is an abstract type that allows to generate functions for all sorts of networks. All other types are derived from this one.  source  #  EcologicalNetwork.Partition     Type .  Type to store a community partition  This type has three elements:   N , the network  L , the array of (integers) module labels  Q , if needed, the modularity value   source  #  EcologicalNetwork.Partition     Method .  Constructor for the  Partition  type  source  #  EcologicalNetwork.Partition     Method .  Constructor for the  Partition  type  source  #  EcologicalNetwork.Unipartite     Type .  Unipartite type  All unipartite networks  source  #  EcologicalNetwork.UnipartiteNetwork     Type .  UnipartiteNetwork  An unipartite deterministic network.  source  #  EcologicalNetwork.UnipartiteNetwork     Method .  Construct an unipartite network from a matrix of integer  source", 
            "title": "Types"
        }, 
        {
            "location": "/lib/internals/", 
            "text": "Internal Documentation\n\n\nDocumentation for EcologicalNetwork's internal interface.\n\n\n\n\nIndex\n\n\n\n\nFunctions\n\n\n#\n\n\nEcologicalNetwork.Q\n \n \nMethod\n.\n\n\nQ \u2013 a measure of modularity\n\n\nThis measures modularity based on a matrix and a list of module labels. Note that this function assumes that interactions are directional, so that $A_{ij}$ represents an interaction from $i$ to $j$, but not the other way around.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.Q\n \n \nMethod\n.\n\n\nQ \u2013 a measure of modularity\n\n\nThis measures Barber's bipartite modularity based on a \nPartition\n object, and update the object in the proccess.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.Qr\n \n \nMethod\n.\n\n\nQr \u2013 a measure of realized modularity\n\n\nMeasures Poisot's realized modularity, based on a  a matrix and a list of module labels. Realized modularity takes values in the [0;1] interval, and is the proportion of interactions established \nwithin\n modules.\n\n\nNote that in some situations, \nQr\n can be \nlower\n than 0. This reflects a partition in which more links are established between than within modules.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.Qr\n \n \nMethod\n.\n\n\nQr \u2013 a measure of realized modularity\n\n\nMeasures Poisot's realized modularity, based on a \nPartition\n object.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.a_var\n \n \nMethod\n.\n\n\nVariance of a series of additive Bernoulli events\n\n\nf(p): \u2211(p(1-p))\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.betadiversity\n \n \nMethod\n.\n\n\nMeasure the expected network similarity\n\n\nNote that this is only meaningful to apply this function when the two matrices have the same species at the same position! If this is note the case, a \nBoundsError\n will be thrown.\n\n\nThis function will return a \nBetaSet\n, which is then used by the function to actually measure the beta-diversity. This package uses the approach of Koleff et a. (2003).\n\n\nReferences\n\n\n\n\nKoleff, P., Gaston, K. J. and Lennon, J. J. (2003), Measuring beta diversity\n\n\n\n\nfor presence\u2013absence data. Journal of Animal Ecology, 72: 367\u2013382. doi: 10.1046/j.1365-2656.2003.00710.x\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.centrality_katz\n \n \nMethod\n.\n\n\nMeasures Katz's centrality for each node in a unipartite network.\n\n\nKeyword arguments\n\n\n\n\na\n (def. 0.1), the weight of each subsequent connection\n\n\nk\n (def. 5), the maximal path length considered\n\n\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.connectance\n \n \nMethod\n.\n\n\nConnectance\n\n\nNumber of links divided by the number of possible interactions. In unipartite networks, this is $L/S^2$. In bipartite networks, this is $L/(T \u00d7 B)$.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.connectance_var\n \n \nMethod\n.\n\n\nExpected variance of the connectance for a probabilistic matrix, measured as the variance of the number of links divided by the squared size of the matrix.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.count_motifs\n \n \nMethod\n.\n\n\nMotif counter for a bipartite network\n\n\nThis function will go through all k-permutations of \nN\n to measure the probability of each induced subgraph being an instance of the motif given by \nm\n (the adjacency matrix of the motif, with 0 and 1). Note that the \nk\n is determined by the dimensions of \nn\n.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.count_motifs\n \n \nMethod\n.\n\n\nMotif counter for an unipartite network\n\n\nThis function will go through all k-permutations of \nN\n to measure the probability of each induced subgraph being an instance of the motif given by \nm\n (the adjacency matrix of the motif, with 0 and 1). Note that the \nk\n is determined by the dimensions of \nn\n.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.degree\n \n \nMethod\n.\n\n\nDegree of a bipartite graph\n\n\nThis function returns the total degree of nodes in a bipartite network. This is a concatenation of the out degree and the in degrees of nodes on both sizes\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.degree\n \n \nMethod\n.\n\n\nDegree of a unipartite network\n\n\nThis function returns the sum of the in and out degree of a unipartite graph\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.degree_in\n \n \nMethod\n.\n\n\nExpected number of ingoing degrees\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.degree_out\n \n \nMethod\n.\n\n\nExpected number of outgoing degrees\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.free_species\n \n \nMethod\n.\n\n\nExpected number of species with no interactions\n\n\nThis function will be applied on the \nunipartite\n version of the network. Note that the functions \nspecies_ |predecessors\n will work on bipartite networks, but the unipartite situation is more general.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.gaston\n \n \nMethod\n.\n\n\nGaston measure of beta-diversity \n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.harrison\n \n \nMethod\n.\n\n\nHarrison measure of beta-diversity \n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.hartekinzig\n \n \nMethod\n.\n\n\nHarte-Kinzig measure of beta-diversity \n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.i_esp\n \n \nMethod\n.\n\n\nExpected value of a single Bernoulli event\n\n\nSimply f(p): p\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.i_var\n \n \nMethod\n.\n\n\nVariance of a single Bernoulli event\n\n\nf(p): p(1-p)\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.jaccard\n \n \nMethod\n.\n\n\nJaccard measure of beta-diversity \n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.label_propagation\n \n \nMethod\n.\n\n\nA \nvery\n experimental label propagation method for probabilistic networks\n\n\nThis function is a take on the usual LP method for community detection. Instead of updating labels by taking the most frequent in the neighbors, this algorithm takes each interaction, and transfers the label across it with a probability equal to the probability of the interaction. It is therefore \nnot\n generalizable for non-probabilistic networks.\n\n\nThe other pitfall is that there is a need to do a \nlarge\n number of iterations to get to a good partition. This method is also untested.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.lande\n \n \nMethod\n.\n\n\nLande measure of beta-diversity \n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.linkage_density\n \n \nMethod\n.\n\n\nLinkage density\n\n\nNumber of links divided by species richness.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.links\n \n \nMethod\n.\n\n\nNumber of links\n\n\nFor all type of networks, this is the sum of the adjacency matrix.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.links_var\n \n \nMethod\n.\n\n\nExpected variance of the number of links for a probabilistic network\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.m_var\n \n \nMethod\n.\n\n\nVariance of a series of multiplicative Bernoulli events\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.make_bernoulli\n \n \nMethod\n.\n\n\nReturns a matrix B of the same size as A, in which each element B(i,j) is 1 with probability A(i,j).\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.make_binary\n \n \nMethod\n.\n\n\nReturns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is greater than 0.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.make_threshold\n \n \nMethod\n.\n\n\nReturns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is \n \nk\n. This is probably unwise to use this function since this practice is of questionnable relevance, but it is included for the sake of exhaustivity.\n\n\nk\n must be in [0;1[.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.make_unipartite\n \n \nMethod\n.\n\n\nTransforms a bipartite network into a unipartite network. Note that this function returns an asymetric unipartite network.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.mcmullen\n \n \nMethod\n.\n\n\nPlant-flower visitor interactions in the Galapagos.\n\n\nTaken from \nhttps://www.nceas.ucsb.edu/interactionweb/html/mc_mullen.html\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.modularity\n \n \nMethod\n.\n\n\nThis function is a wrapper for the modularity code. The number of replicates is the number of times the modularity optimization should be run.\n\n\nNon-keywords arguments:\n\n\n\n\nN\n, a network\n\n\nL\n, an array of module id\n\n\n\n\nKeywords arguments:\n\n\n\n\nreplicates\n, defaults to \n100\n\n\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.motif\n \n \nMethod\n.\n\n\nExpected number of a given motif \n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.motif_p\n \n \nMethod\n.\n\n\nProbability that a group of species form a given motif\n\n\nThis works for both the probabilistic and deterministic networks.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.motif_v\n \n \nMethod\n.\n\n\nVariance that a group of species form a given motif\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.motif_var\n \n \nMethod\n.\n\n\nExpected variance of a given motif \n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.nodiag\n \n \nMethod\n.\n\n\nReturns a copy of the matrix A, with  the diagonal set to 0. Will fail if the matrix is not square.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.null1\n \n \nMethod\n.\n\n\nGiven a matrix \nA\n, \nnull1(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the connectance of \nA\n.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.null2\n \n \nMethod\n.\n\n\nGiven a matrix \nA\n, \nnull2(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the degree of each species.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.null3in\n \n \nMethod\n.\n\n\nGiven a matrix \nA\n, \nnull3in(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the in-degree (number of predecessors) of each species, divided by the total number of possible predecessors.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.null3out\n \n \nMethod\n.\n\n\nGiven a matrix \nA\n, \nnull3out(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the out-degree (number of successors) of each species, divided by the total number of possible successors.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.nullmodel\n \n \nMethod\n.\n\n\nThis function is a wrapper to generate replicated binary matrices from a template probability matrix \nA\n.\n\n\nIf you use julia on more than one CPU, \ni.e.\n if you started it with \njulia -p k\n where \nk\n is more than 1, this function will distribute each trial to one worker. Which means that it's fast.\n\n\nKeyword arguments\n\n\n\n\nn\n (def. 1000), number of replicates to generate\n\n\nmax\n (def. 10000), number of trials to make\n\n\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.number_of_paths\n \n \nMethod\n.\n\n\nNumber of paths of length n between all pairs of nodes\n\n\nThis returns an array, not a network.\n\n\nKeyword arguments\n\n\n\n\nn\n (def. 2), the path length\n\n\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.ollerton\n \n \nMethod\n.\n\n\nFish-anemone interactions\n\n\nTaken from \nhttps://www.nceas.ucsb.edu/interactionweb/html/ollerton_et_al_2007.html\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.richness\n \n \nMethod\n.\n\n\nRichness (number of species) in a bipartite network\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.richness\n \n \nMethod\n.\n\n\nRichness (number of species) in a unipartite network\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.ruggiero\n \n \nMethod\n.\n\n\nRuggiero measure of beta-diversity \n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.sorensen\n \n \nMethod\n.\n\n\nSorensen measure of beta-diversity \n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.species_has_no_predecessors\n \n \nMethod\n.\n\n\nProbability that a species has no predecessors\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.species_has_no_successors\n \n \nMethod\n.\n\n\nProbability that a species has no successors\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.species_is_free\n \n \nMethod\n.\n\n\nProbability that a species has no links\n\n\nThis will return a vector, where the \ni\nth element is the probability that species \ni\n has no interaction. Note that this is only meaningful for unipartite networks.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.stony\n \n \nMethod\n.\n\n\nStony food web from Thompson \n Townsend\n\n\nTaken from \nhttps://www.nceas.ucsb.edu/interactionweb/html/thomps_towns.html\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.whittaker\n \n \nMethod\n.\n\n\nWhittaker measure of beta-diversity \n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.williams\n \n \nMethod\n.\n\n\nWilliams measure of beta-diversity \n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.\u03b7\n \n \nMethod\n.\n\n\nNestedness of a matrix, using the Bastolla et al. (XXXX) measure\n\n\nReturns three values:\n\n\n\n\nnestedness of the entire matrix\n\n\nnestedness of the columns\n\n\nnestedness of the rows\n\n\n\n\nsource\n\n\n#\n\n\nBase.getindex\n \n \nMethod\n.\n\n\nGetindex custom to get interaction value from an EcoNetwork\n\n\nsource\n\n\n#\n\n\nBase.show\n \n \nMethod\n.\n\n\nShow the matrix from an EcoNetwork object\n\n\nsource\n\n\n#\n\n\nBase.transpose\n \n \nMethod\n.\n\n\nReturn a transposed network with the correct type\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.best_partition\n \n \nMethod\n.\n\n\nReturn the best partition\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.delta_matrix\n \n \nMethod\n.\n\n\nGet the \u03b4 matrix\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.most_common_label\n \n \nMethod\n.\n\n\nCount most common labels\n\n\nArguments are the network, the community partition, and the species id\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.most_common_label\n \n \nMethod\n.\n\n\nCount most common labels\n\n\nArguments are the network, the community partition, and the species id\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.motif_internal\n \n \nMethod\n.\n\n\nInternal motif calculations\n\n\nThe two arguments are \nN\n the network and \nm\n the motif adjacency matrix (as a \nDeterministicNetwork\n). The two matrices must have the same size.  The function returns a \nvectorized\n probability of each interaction being in the right state for the motif, \ni.e.\n P if m is 1, and 1 - P if m is 0.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.\u03b7_axis\n \n \nMethod\n.\n\n\nNestedness of a single axis (called internally by \n\u03b7\n)\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.@checkprob\n \n \nMacro\n.\n\n\nQuite crude way of checking that a number is a probability\n\n\nThe two steps are\n\n\n\n\nThe number should be of the \nFloat64\n type \u2013 if not, will yield a \nTypeError\n\n\nThe number should belong to [0,1] \u2013 if not, will throw a \nDomainError\n\n\n\n\nsource", 
            "title": "Internals"
        }, 
        {
            "location": "/lib/internals/#internal-documentation", 
            "text": "Documentation for EcologicalNetwork's internal interface.", 
            "title": "Internal Documentation"
        }, 
        {
            "location": "/lib/internals/#index", 
            "text": "", 
            "title": "Index"
        }, 
        {
            "location": "/lib/internals/#functions", 
            "text": "#  EcologicalNetwork.Q     Method .  Q \u2013 a measure of modularity  This measures modularity based on a matrix and a list of module labels. Note that this function assumes that interactions are directional, so that $A_{ij}$ represents an interaction from $i$ to $j$, but not the other way around.  source  #  EcologicalNetwork.Q     Method .  Q \u2013 a measure of modularity  This measures Barber's bipartite modularity based on a  Partition  object, and update the object in the proccess.  source  #  EcologicalNetwork.Qr     Method .  Qr \u2013 a measure of realized modularity  Measures Poisot's realized modularity, based on a  a matrix and a list of module labels. Realized modularity takes values in the [0;1] interval, and is the proportion of interactions established  within  modules.  Note that in some situations,  Qr  can be  lower  than 0. This reflects a partition in which more links are established between than within modules.  source  #  EcologicalNetwork.Qr     Method .  Qr \u2013 a measure of realized modularity  Measures Poisot's realized modularity, based on a  Partition  object.  source  #  EcologicalNetwork.a_var     Method .  Variance of a series of additive Bernoulli events  f(p): \u2211(p(1-p))  source  #  EcologicalNetwork.betadiversity     Method .  Measure the expected network similarity  Note that this is only meaningful to apply this function when the two matrices have the same species at the same position! If this is note the case, a  BoundsError  will be thrown.  This function will return a  BetaSet , which is then used by the function to actually measure the beta-diversity. This package uses the approach of Koleff et a. (2003).  References   Koleff, P., Gaston, K. J. and Lennon, J. J. (2003), Measuring beta diversity   for presence\u2013absence data. Journal of Animal Ecology, 72: 367\u2013382. doi: 10.1046/j.1365-2656.2003.00710.x  source  #  EcologicalNetwork.centrality_katz     Method .  Measures Katz's centrality for each node in a unipartite network.  Keyword arguments   a  (def. 0.1), the weight of each subsequent connection  k  (def. 5), the maximal path length considered   source  #  EcologicalNetwork.connectance     Method .  Connectance  Number of links divided by the number of possible interactions. In unipartite networks, this is $L/S^2$. In bipartite networks, this is $L/(T \u00d7 B)$.  source  #  EcologicalNetwork.connectance_var     Method .  Expected variance of the connectance for a probabilistic matrix, measured as the variance of the number of links divided by the squared size of the matrix.  source  #  EcologicalNetwork.count_motifs     Method .  Motif counter for a bipartite network  This function will go through all k-permutations of  N  to measure the probability of each induced subgraph being an instance of the motif given by  m  (the adjacency matrix of the motif, with 0 and 1). Note that the  k  is determined by the dimensions of  n .  source  #  EcologicalNetwork.count_motifs     Method .  Motif counter for an unipartite network  This function will go through all k-permutations of  N  to measure the probability of each induced subgraph being an instance of the motif given by  m  (the adjacency matrix of the motif, with 0 and 1). Note that the  k  is determined by the dimensions of  n .  source  #  EcologicalNetwork.degree     Method .  Degree of a bipartite graph  This function returns the total degree of nodes in a bipartite network. This is a concatenation of the out degree and the in degrees of nodes on both sizes  source  #  EcologicalNetwork.degree     Method .  Degree of a unipartite network  This function returns the sum of the in and out degree of a unipartite graph  source  #  EcologicalNetwork.degree_in     Method .  Expected number of ingoing degrees  source  #  EcologicalNetwork.degree_out     Method .  Expected number of outgoing degrees  source  #  EcologicalNetwork.free_species     Method .  Expected number of species with no interactions  This function will be applied on the  unipartite  version of the network. Note that the functions  species_ |predecessors  will work on bipartite networks, but the unipartite situation is more general.  source  #  EcologicalNetwork.gaston     Method .  Gaston measure of beta-diversity   source  #  EcologicalNetwork.harrison     Method .  Harrison measure of beta-diversity   source  #  EcologicalNetwork.hartekinzig     Method .  Harte-Kinzig measure of beta-diversity   source  #  EcologicalNetwork.i_esp     Method .  Expected value of a single Bernoulli event  Simply f(p): p  source  #  EcologicalNetwork.i_var     Method .  Variance of a single Bernoulli event  f(p): p(1-p)  source  #  EcologicalNetwork.jaccard     Method .  Jaccard measure of beta-diversity   source  #  EcologicalNetwork.label_propagation     Method .  A  very  experimental label propagation method for probabilistic networks  This function is a take on the usual LP method for community detection. Instead of updating labels by taking the most frequent in the neighbors, this algorithm takes each interaction, and transfers the label across it with a probability equal to the probability of the interaction. It is therefore  not  generalizable for non-probabilistic networks.  The other pitfall is that there is a need to do a  large  number of iterations to get to a good partition. This method is also untested.  source  #  EcologicalNetwork.lande     Method .  Lande measure of beta-diversity   source  #  EcologicalNetwork.linkage_density     Method .  Linkage density  Number of links divided by species richness.  source  #  EcologicalNetwork.links     Method .  Number of links  For all type of networks, this is the sum of the adjacency matrix.  source  #  EcologicalNetwork.links_var     Method .  Expected variance of the number of links for a probabilistic network  source  #  EcologicalNetwork.m_var     Method .  Variance of a series of multiplicative Bernoulli events  source  #  EcologicalNetwork.make_bernoulli     Method .  Returns a matrix B of the same size as A, in which each element B(i,j) is 1 with probability A(i,j).  source  #  EcologicalNetwork.make_binary     Method .  Returns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is greater than 0.  source  #  EcologicalNetwork.make_threshold     Method .  Returns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is    k . This is probably unwise to use this function since this practice is of questionnable relevance, but it is included for the sake of exhaustivity.  k  must be in [0;1[.  source  #  EcologicalNetwork.make_unipartite     Method .  Transforms a bipartite network into a unipartite network. Note that this function returns an asymetric unipartite network.  source  #  EcologicalNetwork.mcmullen     Method .  Plant-flower visitor interactions in the Galapagos.  Taken from  https://www.nceas.ucsb.edu/interactionweb/html/mc_mullen.html  source  #  EcologicalNetwork.modularity     Method .  This function is a wrapper for the modularity code. The number of replicates is the number of times the modularity optimization should be run.  Non-keywords arguments:   N , a network  L , an array of module id   Keywords arguments:   replicates , defaults to  100   source  #  EcologicalNetwork.motif     Method .  Expected number of a given motif   source  #  EcologicalNetwork.motif_p     Method .  Probability that a group of species form a given motif  This works for both the probabilistic and deterministic networks.  source  #  EcologicalNetwork.motif_v     Method .  Variance that a group of species form a given motif  source  #  EcologicalNetwork.motif_var     Method .  Expected variance of a given motif   source  #  EcologicalNetwork.nodiag     Method .  Returns a copy of the matrix A, with  the diagonal set to 0. Will fail if the matrix is not square.  source  #  EcologicalNetwork.null1     Method .  Given a matrix  A ,  null1(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the connectance of  A .  source  #  EcologicalNetwork.null2     Method .  Given a matrix  A ,  null2(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the degree of each species.  source  #  EcologicalNetwork.null3in     Method .  Given a matrix  A ,  null3in(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the in-degree (number of predecessors) of each species, divided by the total number of possible predecessors.  source  #  EcologicalNetwork.null3out     Method .  Given a matrix  A ,  null3out(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the out-degree (number of successors) of each species, divided by the total number of possible successors.  source  #  EcologicalNetwork.nullmodel     Method .  This function is a wrapper to generate replicated binary matrices from a template probability matrix  A .  If you use julia on more than one CPU,  i.e.  if you started it with  julia -p k  where  k  is more than 1, this function will distribute each trial to one worker. Which means that it's fast.  Keyword arguments   n  (def. 1000), number of replicates to generate  max  (def. 10000), number of trials to make   source  #  EcologicalNetwork.number_of_paths     Method .  Number of paths of length n between all pairs of nodes  This returns an array, not a network.  Keyword arguments   n  (def. 2), the path length   source  #  EcologicalNetwork.ollerton     Method .  Fish-anemone interactions  Taken from  https://www.nceas.ucsb.edu/interactionweb/html/ollerton_et_al_2007.html  source  #  EcologicalNetwork.richness     Method .  Richness (number of species) in a bipartite network  source  #  EcologicalNetwork.richness     Method .  Richness (number of species) in a unipartite network  source  #  EcologicalNetwork.ruggiero     Method .  Ruggiero measure of beta-diversity   source  #  EcologicalNetwork.sorensen     Method .  Sorensen measure of beta-diversity   source  #  EcologicalNetwork.species_has_no_predecessors     Method .  Probability that a species has no predecessors  source  #  EcologicalNetwork.species_has_no_successors     Method .  Probability that a species has no successors  source  #  EcologicalNetwork.species_is_free     Method .  Probability that a species has no links  This will return a vector, where the  i th element is the probability that species  i  has no interaction. Note that this is only meaningful for unipartite networks.  source  #  EcologicalNetwork.stony     Method .  Stony food web from Thompson   Townsend  Taken from  https://www.nceas.ucsb.edu/interactionweb/html/thomps_towns.html  source  #  EcologicalNetwork.whittaker     Method .  Whittaker measure of beta-diversity   source  #  EcologicalNetwork.williams     Method .  Williams measure of beta-diversity   source  #  EcologicalNetwork.\u03b7     Method .  Nestedness of a matrix, using the Bastolla et al. (XXXX) measure  Returns three values:   nestedness of the entire matrix  nestedness of the columns  nestedness of the rows   source  #  Base.getindex     Method .  Getindex custom to get interaction value from an EcoNetwork  source  #  Base.show     Method .  Show the matrix from an EcoNetwork object  source  #  Base.transpose     Method .  Return a transposed network with the correct type  source  #  EcologicalNetwork.best_partition     Method .  Return the best partition  source  #  EcologicalNetwork.delta_matrix     Method .  Get the \u03b4 matrix  source  #  EcologicalNetwork.most_common_label     Method .  Count most common labels  Arguments are the network, the community partition, and the species id  source  #  EcologicalNetwork.most_common_label     Method .  Count most common labels  Arguments are the network, the community partition, and the species id  source  #  EcologicalNetwork.motif_internal     Method .  Internal motif calculations  The two arguments are  N  the network and  m  the motif adjacency matrix (as a  DeterministicNetwork ). The two matrices must have the same size.  The function returns a  vectorized  probability of each interaction being in the right state for the motif,  i.e.  P if m is 1, and 1 - P if m is 0.  source  #  EcologicalNetwork.\u03b7_axis     Method .  Nestedness of a single axis (called internally by  \u03b7 )  source  #  EcologicalNetwork.@checkprob     Macro .  Quite crude way of checking that a number is a probability  The two steps are   The number should be of the  Float64  type \u2013 if not, will yield a  TypeError  The number should belong to [0,1] \u2013 if not, will throw a  DomainError   source", 
            "title": "Functions"
        }
    ]
}