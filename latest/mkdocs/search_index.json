{
    "docs": [
        {
            "location": "/", 
            "text": "Analysis of ecological networks\n\n\nThe \nEcologicalNetwork\n package offers a convenient interface to analyse several types of ecological networks. Rather than providing multiple measures of the same property, we selected measures that have been demonstrated to work and be robust.\n\n\n\n\nOverview of methods\n\n\nThis table gives an overview of the currently available methods, as a function of the network type. In the \nQuantitative\n column, a \nD\n means that the method exists \nbut\n works on the \nDeterministic\n part of the network (\ni.e.\n the information about interaction weight is removed).\n\n\n\n\n\n\n\n\nMeasure type\n\n\nMeasure\n\n\nDeterministic\n\n\nQuantitative\n\n\nProbabilistic\n\n\n\n\n\n\n\n\n\n\ndegree\n\n\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecificity\n\n\nPDI\n\n\n\n\nyes\n\n\n\n\n\n\n\n\n\n\nRR\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconnectance\n\n\n\n\nyes\n\n\nD\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlink density\n\n\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnestedness\n\n\n$\\eta$\n\n\nbipartite\n\n\n\n\nbipartite\n\n\n\n\n\n\n\n\nNODF\n\n\nbipartite\n\n\n\n\n\n\n\n\n\n\n\n\nWNODF\n\n\n\n\nbipartite\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodularity\n\n\n$Q$\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\n\n\n$Q'_R$\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\n\n\nlabel propagation\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmotif counting\n\n\n\n\nyes\n\n\nD\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnull models\n\n\n1 (connectance)\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n2 (degree)\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n3in (columns)\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n3out (rows)\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nswap\n\n\nfill\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\ngenerality\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\nvulnerability\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\ndegre distribution\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncentrality\n\n\nKatz\n\n\nyes\n\n\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnumber of paths\n\n\n\n\nyes\n\n\n\n\nyes", 
            "title": "Home"
        }, 
        {
            "location": "/#analysis-of-ecological-networks", 
            "text": "The  EcologicalNetwork  package offers a convenient interface to analyse several types of ecological networks. Rather than providing multiple measures of the same property, we selected measures that have been demonstrated to work and be robust.", 
            "title": "Analysis of ecological networks"
        }, 
        {
            "location": "/#overview-of-methods", 
            "text": "This table gives an overview of the currently available methods, as a function of the network type. In the  Quantitative  column, a  D  means that the method exists  but  works on the  Deterministic  part of the network ( i.e.  the information about interaction weight is removed).     Measure type  Measure  Deterministic  Quantitative  Probabilistic      degree   yes  yes  yes           specificity  PDI   yes      RR  yes             connectance   yes  D  yes           link density   yes             nestedness  $\\eta$  bipartite   bipartite     NODF  bipartite       WNODF   bipartite            modularity  $Q$  yes  yes  yes     $Q'_R$  yes  yes  yes     label propagation  yes  yes  yes           motif counting   yes  D  yes           null models  1 (connectance)  yes       2 (degree)  yes       3in (columns)  yes       3out (rows)  yes             swap  fill  yes       generality  yes       vulnerability  yes       degre distribution  yes             centrality  Katz  yes   yes           number of paths   yes   yes", 
            "title": "Overview of methods"
        }, 
        {
            "location": "/usecase/nestedness/", 
            "text": "Measuring the nestedness of a network\n\n\nThe goal of this use case is to (i) measure the nestedness of a bipartite network and (ii) evaluate whether it differs from the random expectation. We will use the \nollerton\n data, which are reasonably small, and the \n\u03b7\n measure of nestedness (note that \nnodf\n is also available).\n\n\nusing\n \nEcologicalNetwork\n\n\n\n# Get the data in an object\n\n\nN\n \n=\n \nollerton\n();\n\n\n\n# We will create a function to return the nestedness of the entire\n\n\n# network instead of an array of nestedness values\n\n\nnest\n \n=\n \n(\nx\n)\n \n-\n \n\u03b7\n(\nx\n)[\n1\n]\n\n\n\n# We will now generate a series of random networks preserving the degree\n\n\n# distribution\n\n\nS\n \n=\n \nnullmodel\n(\nnull2\n(\nN\n));\n\n\n\n# There is a function to apply a test rapidly to randomized networks. In this\n\n\n# situation we are interested in testing the fact that the network is more\n\n\n# nested than expected by chance.\n\n\nresults\n \n=\n \ntest_network_property\n(\nN\n,\n \nnest\n,\n \nS\n,\n\n        \ntest\n=:\ngreater\n);\n\n\n\n# We can print the results\n\n\nprintln\n(\n\n        \nThe original network has a nestedness of \n,\n\n        \nround\n(\nnest\n(\nN\n),\n \n3\n),\n\n        \n,\n\\n\n,\n \nwhich is greater than expected by chance (p ~ \n,\n\n        \nround\n(\nresults\n.\npval\n,\n \n4\n),\n\n        \n) -- \n,\n\n        \nresults\n.\nn\n,\n\n        \n random networks.\n\n        \n)\n\n\n\n\n\n\nThe original network has a nestedness of 0.641,\nwhich is greater than expected by chance (p ~ 0.0) -- 307 random networks.\n\n\n\n\n\nIn this simple example, we used \nnullmodel\n to generate random realizations of a network, and \ntest_network_property\n to evaluate whether the observed nestedness was observed by chance. As it stands, all randomized networks had \nlower\n values, and so the \np\n-value is (essentially) null. In short, this network is significantly more nested than expected by chance knowing its degree distribution.\n\n\nWe can also decide to plot the network to visualize what it looks like:\n\n\njulia\n \nusing\n \nEcologicalNetwork\n\n\n\njulia\n \nN\n \n=\n \nollerton\n()\n\n\nEcologicalNetwork\n.\nBipartiteNetwork\n(\nBool\n[\ntrue\n \ntrue\n \n\u2026\n \ntrue\n \ntrue\n;\n \ntrue\n \ntrue\n \n\u2026\n \nfalse\n \nfalse\n;\n \n\u2026\n \n;\n \nfalse\n \nfalse\n \n\u2026\n \nfalse\n \nfalse\n;\n \nfalse\n \ntrue\n \n\u2026\n \nfalse\n \nfalse\n])\n\n\n\njulia\n \nplot_network\n(\nN\n,\n \nfile\n=\nollerton.png\n)\n\n\n\n\n\n\nThis is what the result should look like:", 
            "title": "Nestedness"
        }, 
        {
            "location": "/usecase/nestedness/#measuring-the-nestedness-of-a-network", 
            "text": "The goal of this use case is to (i) measure the nestedness of a bipartite network and (ii) evaluate whether it differs from the random expectation. We will use the  ollerton  data, which are reasonably small, and the  \u03b7  measure of nestedness (note that  nodf  is also available).  using   EcologicalNetwork  # Get the data in an object  N   =   ollerton ();  # We will create a function to return the nestedness of the entire  # network instead of an array of nestedness values  nest   =   ( x )   -   \u03b7 ( x )[ 1 ]  # We will now generate a series of random networks preserving the degree  # distribution  S   =   nullmodel ( null2 ( N ));  # There is a function to apply a test rapidly to randomized networks. In this  # situation we are interested in testing the fact that the network is more  # nested than expected by chance.  results   =   test_network_property ( N ,   nest ,   S , \n         test =: greater );  # We can print the results  println ( \n         The original network has a nestedness of  , \n         round ( nest ( N ),   3 ), \n         , \\n ,   which is greater than expected by chance (p ~  , \n         round ( results . pval ,   4 ), \n         ) --  , \n         results . n , \n          random networks. \n         )   The original network has a nestedness of 0.641,\nwhich is greater than expected by chance (p ~ 0.0) -- 307 random networks.  In this simple example, we used  nullmodel  to generate random realizations of a network, and  test_network_property  to evaluate whether the observed nestedness was observed by chance. As it stands, all randomized networks had  lower  values, and so the  p -value is (essentially) null. In short, this network is significantly more nested than expected by chance knowing its degree distribution.  We can also decide to plot the network to visualize what it looks like:  julia   using   EcologicalNetwork  julia   N   =   ollerton ()  EcologicalNetwork . BipartiteNetwork ( Bool [ true   true   \u2026   true   true ;   true   true   \u2026   false   false ;   \u2026   ;   false   false   \u2026   false   false ;   false   true   \u2026   false   false ])  julia   plot_network ( N ,   file = ollerton.png )   This is what the result should look like:", 
            "title": "Measuring the nestedness of a network"
        }, 
        {
            "location": "/usecase/modularity/", 
            "text": "Measuring the modularity\n\n\nIn this example, we will use \nlabel_propagation\n to optimize the modularity of a network. The data are from the \nmcmullen\n dataset.\n\n\nusing\n \nEcologicalNetwork\n\n\n\n# Get the data in an object\n\n\nN\n \n=\n \nmcmullen\n();\n\n\n\n\n\n\nEcologicalNetwork.BipartiteNetwork(Bool[false false \u2026 false false; false false \u2026 false false; \u2026 ; true false \u2026 false false; true true \u2026 true true])\n\n\n\n\n\nThe next step is to generate starting communities for every species. We will assign species to random initial modules.\n\n\nL\n \n=\n \nrand\n(\n1\n:\nrichness\n(\nN\n),\n \nrichness\n(\nN\n));\n\n\n\n\n\n\n159-element Array{Int64,1}:\n  34\n 118\n 159\n  73\n  24\n  17\n 153\n  92\n  72\n  87\n   \u22ee\n  57\n  85\n  25\n 122\n 132\n 123\n  82\n  37\n   4\n\n\n\n\n\nWe can now start a repeated number of attempts to find the best partition. If \njulia\n is started in parallel, this will use all assigned CPUs.\n\n\nM\n \n=\n \nmodularity\n(\nN\n,\n \nL\n,\n \nreplicates\n=\n100\n);\n\n\n\n# Finally, we can get the best partition\n\n\nb_part\n \n=\n \nbest_partition\n(\nM\n);\n\n\n\n# And print its modularity and number of modules\n\n\nprintln\n(\nQ: \n,\n\n        \nround\n(\nb_part\n[\n1\n]\n.\nQ\n,\n \n2\n),\n\n        \n |c|: \n,\n\n        \nlength\n(\nunique\n(\nb_part\n[\n1\n]\n.\nL\n))\n\n        \n)\n\n\n\n\n\n\nQ\n:\n \n0.55\n \n|\nc\n|:\n \n17", 
            "title": "Modularity"
        }, 
        {
            "location": "/usecase/modularity/#measuring-the-modularity", 
            "text": "In this example, we will use  label_propagation  to optimize the modularity of a network. The data are from the  mcmullen  dataset.  using   EcologicalNetwork  # Get the data in an object  N   =   mcmullen ();   EcologicalNetwork.BipartiteNetwork(Bool[false false \u2026 false false; false false \u2026 false false; \u2026 ; true false \u2026 false false; true true \u2026 true true])  The next step is to generate starting communities for every species. We will assign species to random initial modules.  L   =   rand ( 1 : richness ( N ),   richness ( N ));   159-element Array{Int64,1}:\n  34\n 118\n 159\n  73\n  24\n  17\n 153\n  92\n  72\n  87\n   \u22ee\n  57\n  85\n  25\n 122\n 132\n 123\n  82\n  37\n   4  We can now start a repeated number of attempts to find the best partition. If  julia  is started in parallel, this will use all assigned CPUs.  M   =   modularity ( N ,   L ,   replicates = 100 );  # Finally, we can get the best partition  b_part   =   best_partition ( M );  # And print its modularity and number of modules  println ( Q:  , \n         round ( b_part [ 1 ] . Q ,   2 ), \n          |c|:  , \n         length ( unique ( b_part [ 1 ] . L )) \n         )   Q :   0.55   | c |:   17", 
            "title": "Measuring the modularity"
        }, 
        {
            "location": "/usecase/motifs/", 
            "text": "Counting motifs\n\n\nIn this use case, we will count the number of motifs in a food web. Specifically, we will count how many times there is a linear food chain (A\u2192B\u2192C) between three species.\n\n\nusing\n \nEcologicalNetwork\n\n\n\n# Load a network\n\n\nN\n \n=\n \nstony\n();\n\n\n\n# List of motifs\n\n\nm\n \n=\n \nunipartitemotifs\n();\n\n\n\n\n\n\nDict{Symbol,EcologicalNetwork.UnipartiteNetwork} with 13 entries:\n  :S4 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :S1 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :D6 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; true false t\u2026\n  :D3 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false false true; false false\u2026\n  :S2 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n  :D8 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; true false f\u2026\n  :D1 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n  :D7 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; true false f\u2026\n  :D5 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :S3 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :D4 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :S5 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n  :D2 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n\n\n\n\n\nThe \nm\n object has 13 different motifs, named as in \nStouffer \net al.\n (2007)\n. The function \nunipartitemotifs\n will generate them when needed. Let's look at the \nm[:S1]\n motif:\n\n\nplot_network\n(\nm\n[\n:\nS1\n],\n \nfile\n=\nmotifs1.png\n)\n\n\n\n\n\n\n\n\nThe function to count motifs is called \nmotif\n, and returns a count: how many triplets of species are in a given conformation. For example:\n\n\ns1\n \n=\n \nmotif\n(\nN\n,\n \nm\n[\n:\nS1\n])\n\n\n\n\n\n\n1035.0\n\n\n\n\n\nWe may be interested in knowing whether this motif is over or under-represented in the empirical network, compared to a random expectation. To determine this, we will shuffle interactions around in a way that preserves the number of interactions\nand\n the degree distribution of all species, using \nswaps\n. We will create 100 replicated networks to test.\n\n\npermutations\n \n=\n \nswaps\n(\nN\n,\n \n100\n,\n \nconstraint\n=:\ndegree\n)\n\n\n\nms1\n \n=\n \nmap\n(\nx\n \n-\n \nmotif\n(\nx\n,\n \nm\n[\n:\nS1\n]),\n \npermutations\n)\n\n\n\n\n\n\n100-element Array{Float64,1}:\n 575.0\n 566.0\n 463.0\n 511.0\n 621.0\n 503.0\n 578.0\n 625.0\n 526.0\n 576.0\n   \u22ee\n 621.0\n 538.0\n 572.0\n 612.0\n 573.0\n 528.0\n 574.0\n 585.0\n 542.0", 
            "title": "Motifs"
        }, 
        {
            "location": "/usecase/motifs/#counting-motifs", 
            "text": "In this use case, we will count the number of motifs in a food web. Specifically, we will count how many times there is a linear food chain (A\u2192B\u2192C) between three species.  using   EcologicalNetwork  # Load a network  N   =   stony ();  # List of motifs  m   =   unipartitemotifs ();   Dict{Symbol,EcologicalNetwork.UnipartiteNetwork} with 13 entries:\n  :S4 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :S1 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :D6 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; true false t\u2026\n  :D3 =  EcologicalNetwork.UnipartiteNetwork(Bool[false false true; false false\u2026\n  :S2 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n  :D8 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; true false f\u2026\n  :D1 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n  :D7 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; true false f\u2026\n  :D5 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :S3 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :D4 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :S5 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n  :D2 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026  The  m  object has 13 different motifs, named as in  Stouffer  et al.  (2007) . The function  unipartitemotifs  will generate them when needed. Let's look at the  m[:S1]  motif:  plot_network ( m [ : S1 ],   file = motifs1.png )    The function to count motifs is called  motif , and returns a count: how many triplets of species are in a given conformation. For example:  s1   =   motif ( N ,   m [ : S1 ])   1035.0  We may be interested in knowing whether this motif is over or under-represented in the empirical network, compared to a random expectation. To determine this, we will shuffle interactions around in a way that preserves the number of interactions and  the degree distribution of all species, using  swaps . We will create 100 replicated networks to test.  permutations   =   swaps ( N ,   100 ,   constraint =: degree )  ms1   =   map ( x   -   motif ( x ,   m [ : S1 ]),   permutations )   100-element Array{Float64,1}:\n 575.0\n 566.0\n 463.0\n 511.0\n 621.0\n 503.0\n 578.0\n 625.0\n 526.0\n 576.0\n   \u22ee\n 621.0\n 538.0\n 572.0\n 612.0\n 573.0\n 528.0\n 574.0\n 585.0\n 542.0", 
            "title": "Counting motifs"
        }, 
        {
            "location": "/man/types/", 
            "text": "Informations about types\n\n\nAs there are many ways to represent ecological networks, and the correct way to measure a given property varies in function of the representation, \nEcologicalNetwork\n has a series of built-in types.\n\n\n\n\nType hierarchy\n\n\nThe \nEcologicalNetwork\n package has six main types that are meant to be used by the user: \nBipartiteNetwork\n, \nBipartiteProbaNetwork\n, \nBipartiteQuantiNetwork\n, \nUnipartiteNetwork\n, \nUnipartiteProbaNetwork\n and \nUnipartiteQuantiNetwork\n. All types with \nProba\n in their names are meant to represent probabilistic networks, and are also part of the union type \nProbabilisticNetwork\n. All types \nwithout\n \nProba\n in their name are part of the union type \nDeterministicNetwork\n, and represent networks in which interactions are either present or absent. All types with \nQuanti\n in their names are part of the \nQuantitativeNetwork\n groups, and represent networks with weighted interactions. All types starting with \nBipartite\n are also part of the abstract type \nBipartite\n, and types with \nUnipartite\n in their names are part of the abstract type \nUnipartite\n. Finally, both \nUnipartite\n and \nBipartite\n are part of the abstract type \nEcoNetwork\n.\n\n\nAlthough this may seem convoluted, this is important to understand: when writing functions, you can restrict them to any type of network you want by using the right type in their declaration. You can also check properties of a network just by looking at its type. For example, one can check whether a network \nN\n is bipartite with:\n\n\ntypeof\n(\nN\n)\n \n:\n \nBipartite\n\n\n\n\n\n\nNetworks are represented as two-dimensional matrices. All types are simply wrappers around an adjacency matrix, stored as the \nA\n property of the object. To look at the adjacency matrix of a network \nN\n, one therefore uses \nN.A\n. These matrices must be read as: the existence/probability of an interaction \nfrom\n the species of the \ni\n-th row \nto\n the species in the \nj\n-th column. This implies that the networks are, by default, directed.\n\n\nNote that the type of a network will determine what methods can be applied to it. For example, all measures of variance are only making sense for probabilistic networks.\n\n\n\n\nData types\n\n\nInteractions in deterministic networks are represented as boolean (\ntrue\n/\nfalse\n) values. This is memory efficient, so large networks can be represented (one interactions represented as a boolean uses 8 times fewer memory than the same interaction represented as an integer). This being said, all networks of the \nDeterministicNetwork\n type can be read from matrices of integers, \nas long as these matrices only contain 0 and 1\n.\n\n\nIn probabilistic networks, interactions are stored as floating point (\nFloat64\n) numbers. These values have to be between 0.0 and 1.0, as they represent probabilities. In quantitative networks, interactions are stored as any type of number.\n\n\nNetworks of the \nUnipartite\n class must have the same number of rows and columns. The species in the rows and columns are the same. Networks of the \nBipartite\n class are expected to have different numbers of rows and columns, as the species in rows and columns are different species. It is possible to convert a network from \nBipartite\n to \nUnipartite\n using the \nmake_unipartite\n function:\n\n\nusing\n \nEcologicalNetwork\n\n\nB\n \n=\n \nBipartiteNetwork\n(\nrand\n(\nBool\n,\n \n(\n3\n,\n \n5\n)))\n\n\nU\n \n=\n \nmake_unipartite\n(\nB\n)\n\n\nrichness\n(\nU\n)\n \n==\n \nrichness\n(\nB\n)\n\n\n\n\n\n\ntrue\n\n\n\n\n\nThe documentation for \nmake_unipartite\n gives additional explanations about how the conversion is done. In the overwhelming majority of cases, applying any measure to a bipartite network, and to the same network made unipartite, should give the same results (connectance is one notable example).\n\n\n\n\nType reference\n\n\n#\n\n\nEcologicalNetwork.Bipartite\n \n \nType\n.\n\n\nAll bipartite networks\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.BipartiteNetwork\n \n \nType\n.\n\n\nA bipartite deterministic network is a two-dimensional array of boolean values.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.BipartiteNetwork\n \n \nMethod\n.\n\n\nConstruct a bipartite network from a matrix of integer\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.EcoNetwork\n \n \nType\n.\n\n\nThis is an abstract type that allows to generate functions for all sorts of networks. All other types are derived from this one.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.Unipartite\n \n \nType\n.\n\n\nAll unipartite networks\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.UnipartiteNetwork\n \n \nType\n.\n\n\nAn unipartite deterministic network.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.UnipartiteNetwork\n \n \nMethod\n.\n\n\nConstruct an unipartite network from a matrix of integer\n\n\nsource", 
            "title": "Types"
        }, 
        {
            "location": "/man/types/#informations-about-types", 
            "text": "As there are many ways to represent ecological networks, and the correct way to measure a given property varies in function of the representation,  EcologicalNetwork  has a series of built-in types.", 
            "title": "Informations about types"
        }, 
        {
            "location": "/man/types/#type-hierarchy", 
            "text": "The  EcologicalNetwork  package has six main types that are meant to be used by the user:  BipartiteNetwork ,  BipartiteProbaNetwork ,  BipartiteQuantiNetwork ,  UnipartiteNetwork ,  UnipartiteProbaNetwork  and  UnipartiteQuantiNetwork . All types with  Proba  in their names are meant to represent probabilistic networks, and are also part of the union type  ProbabilisticNetwork . All types  without   Proba  in their name are part of the union type  DeterministicNetwork , and represent networks in which interactions are either present or absent. All types with  Quanti  in their names are part of the  QuantitativeNetwork  groups, and represent networks with weighted interactions. All types starting with  Bipartite  are also part of the abstract type  Bipartite , and types with  Unipartite  in their names are part of the abstract type  Unipartite . Finally, both  Unipartite  and  Bipartite  are part of the abstract type  EcoNetwork .  Although this may seem convoluted, this is important to understand: when writing functions, you can restrict them to any type of network you want by using the right type in their declaration. You can also check properties of a network just by looking at its type. For example, one can check whether a network  N  is bipartite with:  typeof ( N )   :   Bipartite   Networks are represented as two-dimensional matrices. All types are simply wrappers around an adjacency matrix, stored as the  A  property of the object. To look at the adjacency matrix of a network  N , one therefore uses  N.A . These matrices must be read as: the existence/probability of an interaction  from  the species of the  i -th row  to  the species in the  j -th column. This implies that the networks are, by default, directed.  Note that the type of a network will determine what methods can be applied to it. For example, all measures of variance are only making sense for probabilistic networks.", 
            "title": "Type hierarchy"
        }, 
        {
            "location": "/man/types/#data-types", 
            "text": "Interactions in deterministic networks are represented as boolean ( true / false ) values. This is memory efficient, so large networks can be represented (one interactions represented as a boolean uses 8 times fewer memory than the same interaction represented as an integer). This being said, all networks of the  DeterministicNetwork  type can be read from matrices of integers,  as long as these matrices only contain 0 and 1 .  In probabilistic networks, interactions are stored as floating point ( Float64 ) numbers. These values have to be between 0.0 and 1.0, as they represent probabilities. In quantitative networks, interactions are stored as any type of number.  Networks of the  Unipartite  class must have the same number of rows and columns. The species in the rows and columns are the same. Networks of the  Bipartite  class are expected to have different numbers of rows and columns, as the species in rows and columns are different species. It is possible to convert a network from  Bipartite  to  Unipartite  using the  make_unipartite  function:  using   EcologicalNetwork  B   =   BipartiteNetwork ( rand ( Bool ,   ( 3 ,   5 )))  U   =   make_unipartite ( B )  richness ( U )   ==   richness ( B )   true  The documentation for  make_unipartite  gives additional explanations about how the conversion is done. In the overwhelming majority of cases, applying any measure to a bipartite network, and to the same network made unipartite, should give the same results (connectance is one notable example).", 
            "title": "Data types"
        }, 
        {
            "location": "/man/types/#type-reference", 
            "text": "#  EcologicalNetwork.Bipartite     Type .  All bipartite networks  source  #  EcologicalNetwork.BipartiteNetwork     Type .  A bipartite deterministic network is a two-dimensional array of boolean values.  source  #  EcologicalNetwork.BipartiteNetwork     Method .  Construct a bipartite network from a matrix of integer  source  #  EcologicalNetwork.EcoNetwork     Type .  This is an abstract type that allows to generate functions for all sorts of networks. All other types are derived from this one.  source  #  EcologicalNetwork.Unipartite     Type .  All unipartite networks  source  #  EcologicalNetwork.UnipartiteNetwork     Type .  An unipartite deterministic network.  source  #  EcologicalNetwork.UnipartiteNetwork     Method .  Construct an unipartite network from a matrix of integer  source", 
            "title": "Type reference"
        }, 
        {
            "location": "/man/data/", 
            "text": "Datasets\n\n\nEcologicalNetwork\n comes with a few datasets.\n\n\n\n\nUnipartite networks\n\n\n#\n\n\nEcologicalNetwork.stony\n \n \nFunction\n.\n\n\nStony food web from Thompson \n Townsend. This was sampled in a tussock grassland near Otago, New Zealand. Note that there is, in the original matrix, a species with no interactions. It is removed when generating the network.\n\n\nsource\n\n\n\n\nBipartite networks\n\n\n#\n\n\nEcologicalNetwork.ollerton\n \n \nFunction\n.\n\n\nFish-anemone interactions from Ollerton et al. 2007\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.mcmullen\n \n \nFunction\n.\n\n\nPlant-flower visitor interactions in the Galapagos.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.robertson\n \n \nFunction\n.\n\n\nPollination interaction from Robertson 1927, in an agricultural area dominated by crops, with some natural forest and pasture.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.bluthgen\n \n \nFunction\n.\n\n\nNumber of visits from Bluthgen et al XXX\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.woods\n \n \nFunction\n.\n\n\nLake of the Woods host-parasite data. Interactions content are prevalence.\n\n\nsource\n\n\n\n\nNetwork collections\n\n\n#\n\n\nEcologicalNetwork.soilphagebacteria\n \n \nFunction\n.\n\n\nSoil-isolated phage-bacteria networks. Interactions are the impact of phage on the bacteria.\n\n\nhttps://figshare.com/articles/Phage_bacteria_networks_isolated_in_soil/696102\n\n\nTakes a positional argument \ni\n, indicating which network (from 1 to 5) to return.\n\n\nsource", 
            "title": "Data"
        }, 
        {
            "location": "/man/data/#datasets", 
            "text": "EcologicalNetwork  comes with a few datasets.", 
            "title": "Datasets"
        }, 
        {
            "location": "/man/data/#unipartite-networks", 
            "text": "#  EcologicalNetwork.stony     Function .  Stony food web from Thompson   Townsend. This was sampled in a tussock grassland near Otago, New Zealand. Note that there is, in the original matrix, a species with no interactions. It is removed when generating the network.  source", 
            "title": "Unipartite networks"
        }, 
        {
            "location": "/man/data/#bipartite-networks", 
            "text": "#  EcologicalNetwork.ollerton     Function .  Fish-anemone interactions from Ollerton et al. 2007  source  #  EcologicalNetwork.mcmullen     Function .  Plant-flower visitor interactions in the Galapagos.  source  #  EcologicalNetwork.robertson     Function .  Pollination interaction from Robertson 1927, in an agricultural area dominated by crops, with some natural forest and pasture.  source  #  EcologicalNetwork.bluthgen     Function .  Number of visits from Bluthgen et al XXX  source  #  EcologicalNetwork.woods     Function .  Lake of the Woods host-parasite data. Interactions content are prevalence.  source", 
            "title": "Bipartite networks"
        }, 
        {
            "location": "/man/data/#network-collections", 
            "text": "#  EcologicalNetwork.soilphagebacteria     Function .  Soil-isolated phage-bacteria networks. Interactions are the impact of phage on the bacteria.  https://figshare.com/articles/Phage_bacteria_networks_isolated_in_soil/696102  Takes a positional argument  i , indicating which network (from 1 to 5) to return.  source", 
            "title": "Network collections"
        }, 
        {
            "location": "/man/nullmodels/", 
            "text": "Null models\n\n\nEcologicalNetwork\n offers a number of ways to draw random binary networks from a template of probabilities. This is useful to generate networks under a null model, for example. All these functions will respect the fact that the network in bipartite or unipartite.\n\n\n\n\nCreating a deterministic network from a probabilistic network\n\n\nThere are a number of ways to generate a deterministic network from a probabilistic one. All of these functions take a network on a class belonging to \nProbabilisticNetwork\n, and return a network of a class belonging to \nDeterministicNetwork\n.\n\n\n\n\nConvert to deterministic\n\n\nThe first is simply to assing \ntrue\n to all interactions with a non-0 probability, and \nfalse\n to the others. This is done with the \nmake_binary\n function:\n\n\nN\n \n=\n \nUnipartiteProbaNetwork\n(\neye\n(\n3\n))\n\n\nB\n \n=\n \nmake_binary\n(\nN\n)\n\n\nB\n.\nA\n\n\n\n\n\n\n3\u00d73 Array{Bool,2}:\n  true  false  false\n false   true  false\n false  false   true\n\n\n\n\n\n#\n\n\nEcologicalNetwork.make_binary\n \n \nFunction\n.\n\n\nReturns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is greater than 0.\n\n\nsource\n\n\n\n\nUsing a threshold\n\n\nThe second way is to determine a cutoff for probabilities, below which they will be assigned \nfalse\n. This is done through \nmake_threshold\n:\n\n\nN\n \n=\n \nUnipartiteProbaNetwork\n(\nrand\n((\n4\n,\n \n4\n)))\n\n\nB\n \n=\n \nmake_threshold\n(\nN\n,\n \n0.5\n)\n\n\nB\n.\nA\n\n\n\n\n\n\n4\u00d74 Array{Bool,2}:\n  true  false  false  true\n  true  false   true  true\n false   true  false  true\n  true   true   true  true\n\n\n\n\n\n#\n\n\nEcologicalNetwork.make_threshold\n \n \nFunction\n.\n\n\nReturns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is \n \nk\n. This is probably unwise to use this function since this practice is of questionnable relevance, but it is included for the sake of exhaustivity.\n\n\nk\n must be in [0;1[.\n\n\nsource\n\n\n\n\nRandom draws\n\n\nThe last way to convert a probabilistic network to a deterministic one is to perform one random draw for each interaction. In this scenario, \ntrue\n is assigned with a probability $P_{ij}$. This is done with the \nmake_bernoulli\n function:\n\n\nN\n \n=\n \nBipartiteProbaNetwork\n(\nrand\n((\n4\n,\n \n4\n)))\n\n\nB\n \n=\n \nmake_bernoulli\n(\nN\n)\n\n\nB\n.\nA\n\n\n\n\n\n\n4\u00d74 Array{Bool,2}:\n false  true   true  false\n false  true  false  false\n  true  true  false   true\n  true  true   true   true\n\n\n\n\n\n#\n\n\nEcologicalNetwork.make_bernoulli\n \n \nFunction\n.\n\n\nReturns a matrix B of the same size as A, in which each element B(i,j) is 1 with probability A(i,j).\n\n\nsource\n\n\n\n\nCreating a probabilistic network from a deterministic network\n\n\nThe inverse operation can be done using the \nnullX\n functions. These functions use informations about the degree distribution to generate probabilistic networks:\n\n\n#\n\n\nEcologicalNetwork.null1\n \n \nFunction\n.\n\n\nGiven a matrix \nA\n, \nnull1(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the connectance of \nA\n.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.null2\n \n \nFunction\n.\n\n\nGiven a matrix \nA\n, \nnull2(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the degree of each species.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.null3in\n \n \nFunction\n.\n\n\nGiven a matrix \nA\n, \nnull3in(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the in-degree (number of predecessors) of each species, divided by the total number of possible predecessors.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.null3out\n \n \nFunction\n.\n\n\nGiven a matrix \nA\n, \nnull3out(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the out-degree (number of successors) of each species, divided by the total number of possible successors.\n\n\nsource\n\n\nFor an example:\n\n\nN\n \n=\n \nmake_bernoulli\n(\nBipartiteProbaNetwork\n(\nrand\n(\n3\n,\n \n5\n)))\n\n\nnull2\n(\nN\n)\n.\nA\n\n\n\n\n\n\n3\u00d75 Array{Float64,2}:\n 0.266667  0.433333  0.433333  0.433333  0.1\n 0.466667  0.633333  0.633333  0.633333  0.3\n 0.466667  0.633333  0.633333  0.633333  0.3\n\n\n\n\n\n\n\nNull model wrapper\n\n\nEcologicalNetwork\n has a wrapper to generate an arbitrary number of Bernoulli networks from a probability matrix. This approach is encourage over simply generating your own networks, because the wrapper will make sure that all networks have no species without any interactions. This ensures that the networks have the same size.\n\n\nFor example, we can generate a hundred replicates from the \nstony\n food web dataset, using the type 2 model:\n\n\ntemplate\n \n=\n \nnull2\n(\nstony\n())\n\n\n\n# Generate up to 100 networks\n\n\nN\n \n=\n \nnullmodel\n(\ntemplate\n,\n \nn\n=\n100\n,\n \nmax\n=\n1000\n)\n\n\n\n# Average connectance\n\n\nmean\n(\nmap\n(\nconnectance\n,\n \nN\n))\n\n\n\n\n\n\n0.06587372448979592\n\n\n\n\n\nIt must be noted that the number of networks returned by \nnullmodel\n may be \nlower\n than the requested number of networks. This is because of the constraint on the fact that no species can end up without interactions. When this constrained is enforced, some networks have very low success rates. This can be measured using the \nspecies_is_free\n function:\n\n\ntemplate\n \n=\n \nnull2\n(\nmcmullen\n())\n\n\n\n# Probability that every species has at least one interaction\n\n\nat_least_one\n \n=\n \n1.\n-\nspecies_is_free\n(\nmake_unipartite\n(\ntemplate\n))\n\n\n\n# Probability that a randomized network has no unconnected species\n\n\nprod\n(\nat_least_one\n)\n\n\n\n\n\n\n1.1674941263628132e-10\n\n\n\n\n\n#\n\n\nEcologicalNetwork.nullmodel\n \n \nFunction\n.\n\n\nThis function is a wrapper to generate replicated binary matrices from a template probability matrix \nA\n.\n\n\nIf you use julia on more than one CPU, \ni.e.\n if you started it with \njulia -p k\n where \nk\n is more than 1, this function will distribute each trial to one worker. Which means that it's fast.\n\n\nKeyword arguments\n\n\n\n\nn\n (def. 1000), number of replicates to generate\n\n\nmax\n (def. 10000), number of trials to make\n\n\n\n\nsource", 
            "title": "Null models"
        }, 
        {
            "location": "/man/nullmodels/#null-models", 
            "text": "EcologicalNetwork  offers a number of ways to draw random binary networks from a template of probabilities. This is useful to generate networks under a null model, for example. All these functions will respect the fact that the network in bipartite or unipartite.", 
            "title": "Null models"
        }, 
        {
            "location": "/man/nullmodels/#creating-a-deterministic-network-from-a-probabilistic-network", 
            "text": "There are a number of ways to generate a deterministic network from a probabilistic one. All of these functions take a network on a class belonging to  ProbabilisticNetwork , and return a network of a class belonging to  DeterministicNetwork .", 
            "title": "Creating a deterministic network from a probabilistic network"
        }, 
        {
            "location": "/man/nullmodels/#convert-to-deterministic", 
            "text": "The first is simply to assing  true  to all interactions with a non-0 probability, and  false  to the others. This is done with the  make_binary  function:  N   =   UnipartiteProbaNetwork ( eye ( 3 ))  B   =   make_binary ( N )  B . A   3\u00d73 Array{Bool,2}:\n  true  false  false\n false   true  false\n false  false   true  #  EcologicalNetwork.make_binary     Function .  Returns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is greater than 0.  source", 
            "title": "Convert to deterministic"
        }, 
        {
            "location": "/man/nullmodels/#using-a-threshold", 
            "text": "The second way is to determine a cutoff for probabilities, below which they will be assigned  false . This is done through  make_threshold :  N   =   UnipartiteProbaNetwork ( rand (( 4 ,   4 )))  B   =   make_threshold ( N ,   0.5 )  B . A   4\u00d74 Array{Bool,2}:\n  true  false  false  true\n  true  false   true  true\n false   true  false  true\n  true   true   true  true  #  EcologicalNetwork.make_threshold     Function .  Returns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is    k . This is probably unwise to use this function since this practice is of questionnable relevance, but it is included for the sake of exhaustivity.  k  must be in [0;1[.  source", 
            "title": "Using a threshold"
        }, 
        {
            "location": "/man/nullmodels/#random-draws", 
            "text": "The last way to convert a probabilistic network to a deterministic one is to perform one random draw for each interaction. In this scenario,  true  is assigned with a probability $P_{ij}$. This is done with the  make_bernoulli  function:  N   =   BipartiteProbaNetwork ( rand (( 4 ,   4 )))  B   =   make_bernoulli ( N )  B . A   4\u00d74 Array{Bool,2}:\n false  true   true  false\n false  true  false  false\n  true  true  false   true\n  true  true   true   true  #  EcologicalNetwork.make_bernoulli     Function .  Returns a matrix B of the same size as A, in which each element B(i,j) is 1 with probability A(i,j).  source", 
            "title": "Random draws"
        }, 
        {
            "location": "/man/nullmodels/#creating-a-probabilistic-network-from-a-deterministic-network", 
            "text": "The inverse operation can be done using the  nullX  functions. These functions use informations about the degree distribution to generate probabilistic networks:  #  EcologicalNetwork.null1     Function .  Given a matrix  A ,  null1(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the connectance of  A .  source  #  EcologicalNetwork.null2     Function .  Given a matrix  A ,  null2(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the degree of each species.  source  #  EcologicalNetwork.null3in     Function .  Given a matrix  A ,  null3in(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the in-degree (number of predecessors) of each species, divided by the total number of possible predecessors.  source  #  EcologicalNetwork.null3out     Function .  Given a matrix  A ,  null3out(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the out-degree (number of successors) of each species, divided by the total number of possible successors.  source  For an example:  N   =   make_bernoulli ( BipartiteProbaNetwork ( rand ( 3 ,   5 )))  null2 ( N ) . A   3\u00d75 Array{Float64,2}:\n 0.266667  0.433333  0.433333  0.433333  0.1\n 0.466667  0.633333  0.633333  0.633333  0.3\n 0.466667  0.633333  0.633333  0.633333  0.3", 
            "title": "Creating a probabilistic network from a deterministic network"
        }, 
        {
            "location": "/man/nullmodels/#null-model-wrapper", 
            "text": "EcologicalNetwork  has a wrapper to generate an arbitrary number of Bernoulli networks from a probability matrix. This approach is encourage over simply generating your own networks, because the wrapper will make sure that all networks have no species without any interactions. This ensures that the networks have the same size.  For example, we can generate a hundred replicates from the  stony  food web dataset, using the type 2 model:  template   =   null2 ( stony ())  # Generate up to 100 networks  N   =   nullmodel ( template ,   n = 100 ,   max = 1000 )  # Average connectance  mean ( map ( connectance ,   N ))   0.06587372448979592  It must be noted that the number of networks returned by  nullmodel  may be  lower  than the requested number of networks. This is because of the constraint on the fact that no species can end up without interactions. When this constrained is enforced, some networks have very low success rates. This can be measured using the  species_is_free  function:  template   =   null2 ( mcmullen ())  # Probability that every species has at least one interaction  at_least_one   =   1. - species_is_free ( make_unipartite ( template ))  # Probability that a randomized network has no unconnected species  prod ( at_least_one )   1.1674941263628132e-10  #  EcologicalNetwork.nullmodel     Function .  This function is a wrapper to generate replicated binary matrices from a template probability matrix  A .  If you use julia on more than one CPU,  i.e.  if you started it with  julia -p k  where  k  is more than 1, this function will distribute each trial to one worker. Which means that it's fast.  Keyword arguments   n  (def. 1000), number of replicates to generate  max  (def. 10000), number of trials to make   source", 
            "title": "Null model wrapper"
        }, 
        {
            "location": "/man/modularity/", 
            "text": "Measuring modularity\n\n\nThere are a number of modularity-related functions in \nEcologicalNetworks\n. The optimal modularity structure is detected by optimizing $Q$, which returns values increasingly close to unity when the modular structure is strong. The $Q'_R$ measure is also included for \na posteriori\n evaluation of the modularity.\n\n\n\n\nInitial module assignment\n\n\nThere are a number of ways to...", 
            "title": "Modularity"
        }, 
        {
            "location": "/man/modularity/#measuring-modularity", 
            "text": "There are a number of modularity-related functions in  EcologicalNetworks . The optimal modularity structure is detected by optimizing $Q$, which returns values increasingly close to unity when the modular structure is strong. The $Q'_R$ measure is also included for  a posteriori  evaluation of the modularity.", 
            "title": "Measuring modularity"
        }, 
        {
            "location": "/man/modularity/#initial-module-assignment", 
            "text": "There are a number of ways to...", 
            "title": "Initial module assignment"
        }, 
        {
            "location": "/man/motifs/", 
            "text": "Counting motifs\n\n\nThere are a number of ways to...\n\n\n\n\nNote\n\n\nThe enumeration of motifs can take a little while. It depends on the number of nodes in the networks, and in the number of nodes in the motif. It may be wise, in case you want to count several motifs on a single network, to use Julia's parallel computing abilities to speed things up.\n\n\n\n\n\n\nHow it works\n\n\nInternally, the code to count motifs is \nNot Elegant\n\u2122. Every motif is represented by its adjacency matrix, as a \nDeterministicNetwork\n object. Then \nall\n possible induced sub-graphs with the same number of nodes (at either level if this is a \nBipartite\n) are extracted, and matched against all \nunique\n possible permutations of the motif. If there is a match, then this induced subgraph is an instance of this motif.\n\n\nmotifs\n\n\n\n\n\n\n\nCaveats\n\n\nThe motifs are counted in a way that ignore self-links. This should not be an issue most of the time, and was also the ways this was done in most publications counting motifs in ecological networks.\n\n\n\n\nUsual motifs\n\n\n#\n\n\nEcologicalNetwork.unipartitemotifs\n \n \nFunction\n.\n\n\nReturns a dictionary of the usual unipartite motifs. The names of the motifs come from Stouffer et al. (2007) \u2013 especially Fig. 1, available online at \nhttp://rspb.royalsocietypublishing.org/content/274/1621/1931.figures-only\n\n\nsource", 
            "title": "Motifs"
        }, 
        {
            "location": "/man/motifs/#counting-motifs", 
            "text": "There are a number of ways to...   Note  The enumeration of motifs can take a little while. It depends on the number of nodes in the networks, and in the number of nodes in the motif. It may be wise, in case you want to count several motifs on a single network, to use Julia's parallel computing abilities to speed things up.", 
            "title": "Counting motifs"
        }, 
        {
            "location": "/man/motifs/#how-it-works", 
            "text": "Internally, the code to count motifs is  Not Elegant \u2122. Every motif is represented by its adjacency matrix, as a  DeterministicNetwork  object. Then  all  possible induced sub-graphs with the same number of nodes (at either level if this is a  Bipartite ) are extracted, and matched against all  unique  possible permutations of the motif. If there is a match, then this induced subgraph is an instance of this motif.  motifs", 
            "title": "How it works"
        }, 
        {
            "location": "/man/motifs/#caveats", 
            "text": "The motifs are counted in a way that ignore self-links. This should not be an issue most of the time, and was also the ways this was done in most publications counting motifs in ecological networks.", 
            "title": "Caveats"
        }, 
        {
            "location": "/man/motifs/#usual-motifs", 
            "text": "#  EcologicalNetwork.unipartitemotifs     Function .  Returns a dictionary of the usual unipartite motifs. The names of the motifs come from Stouffer et al. (2007) \u2013 especially Fig. 1, available online at  http://rspb.royalsocietypublishing.org/content/274/1621/1931.figures-only  source", 
            "title": "Usual motifs"
        }, 
        {
            "location": "/man/plotting/", 
            "text": "Plotting\n\n\nPlotting is done with the \nplot_network\n function.\n\n\njulia\n \nusing\n \nEcologicalNetwork\n\n\n\njulia\n \nN\n \n=\n \nbluthgen\n()\n\n\nEcologicalNetwork\n.\nBipartiteQuantiNetwork\n(\nNumber\n[\n1.0\n \n0.0\n \n\u2026\n \n0.0\n \n0.0\n;\n \n0.0\n \n0.0\n \n\u2026\n \n0.0\n \n0.0\n;\n \n\u2026\n \n;\n \n0.0\n \n0.0\n \n\u2026\n \n0.0\n \n1.0\n;\n \n0.0\n \n0.0\n \n\u2026\n \n0.0\n \n0.0\n])\n\n\n\njulia\n \nplot_network\n(\nN\n,\n \nfile\n=\nbluthgenDegree.png\n)\n\n\n\n\n\n\nThis is what the result should look like:\n\n\n\n\n\n\nPlotting modular networks\n\n\nPlotting modular networks is a special case, for which the \nplot_network\n function accepts an additional argument (a network \nPartition\n).\n\n\n\n\nAdditional information\n\n\n#\n\n\nEcologicalNetwork.plot_network\n \n \nFunction\n.\n\n\nDraw a network as a matrix to a png file. In the case of a quantitative or probabilistic network, nuances of grey indicate interaction strength.\n\n\nArguments:\n\n\n\n\nN::EcoNetwork\n, the network to draw\n\n\n\n\nKeywords:\n\n\n\n\norder::Symbol\n, either \n:none\n or \n:degree\n (default), the criteria to use to re-order nodes\n\n\ntransform::Function\n, the function to apply to every interaction (\nx -\n x\n by default, but can be \nsqrt\n, \nlog\n, ...)\n\n\nfile\n, the name of the file (with the \n.png\n extension) to write to\n\n\n\n\nsource\n\n\nDraw a network as a matrix to a png file, and respects the modules of every nodes. In the case of a quantitative or probabilistic network, nuances of grey indicate interaction strength.\n\n\nArguments:\n\n\n\n\nN::EcoNetwork\n, the network to draw\n\n\nP::Partition\n, the partition of the network\n\n\n\n\nKeywords:\n\n\n\n\norder::Symbol\n, either \n:none\n or \n:degree\n (default), the criteria to use to re-order nodes within modules\n\n\ntransform::Function\n, the function to apply to every interaction (\nx -\n x\n by default, but can be \nsqrt\n, \nlog\n, ...)\n\n\nfile\n, the name of the file (with the \n.png\n extension) to write to\n\n\n\n\nsource", 
            "title": "Plotting"
        }, 
        {
            "location": "/man/plotting/#plotting", 
            "text": "Plotting is done with the  plot_network  function.  julia   using   EcologicalNetwork  julia   N   =   bluthgen ()  EcologicalNetwork . BipartiteQuantiNetwork ( Number [ 1.0   0.0   \u2026   0.0   0.0 ;   0.0   0.0   \u2026   0.0   0.0 ;   \u2026   ;   0.0   0.0   \u2026   0.0   1.0 ;   0.0   0.0   \u2026   0.0   0.0 ])  julia   plot_network ( N ,   file = bluthgenDegree.png )   This is what the result should look like:", 
            "title": "Plotting"
        }, 
        {
            "location": "/man/plotting/#plotting-modular-networks", 
            "text": "Plotting modular networks is a special case, for which the  plot_network  function accepts an additional argument (a network  Partition ).", 
            "title": "Plotting modular networks"
        }, 
        {
            "location": "/man/plotting/#additional-information", 
            "text": "#  EcologicalNetwork.plot_network     Function .  Draw a network as a matrix to a png file. In the case of a quantitative or probabilistic network, nuances of grey indicate interaction strength.  Arguments:   N::EcoNetwork , the network to draw   Keywords:   order::Symbol , either  :none  or  :degree  (default), the criteria to use to re-order nodes  transform::Function , the function to apply to every interaction ( x -  x  by default, but can be  sqrt ,  log , ...)  file , the name of the file (with the  .png  extension) to write to   source  Draw a network as a matrix to a png file, and respects the modules of every nodes. In the case of a quantitative or probabilistic network, nuances of grey indicate interaction strength.  Arguments:   N::EcoNetwork , the network to draw  P::Partition , the partition of the network   Keywords:   order::Symbol , either  :none  or  :degree  (default), the criteria to use to re-order nodes within modules  transform::Function , the function to apply to every interaction ( x -  x  by default, but can be  sqrt ,  log , ...)  file , the name of the file (with the  .png  extension) to write to   source", 
            "title": "Additional information"
        }, 
        {
            "location": "/lib/public/", 
            "text": "Functions\n\n\nThis page give a complete overview of all functions available to the user, organized by type of analysis. See \nInternal Documentation\n for documentation on internal functions.\n\n\n\n\nIndex\n\n\n\n\nFunctions\n\n\n\n\nConnectance\n\n\n@autodocs\nconnectance", 
            "title": "Public"
        }, 
        {
            "location": "/lib/public/#functions", 
            "text": "This page give a complete overview of all functions available to the user, organized by type of analysis. See  Internal Documentation  for documentation on internal functions.", 
            "title": "Functions"
        }, 
        {
            "location": "/lib/public/#index", 
            "text": "", 
            "title": "Index"
        }, 
        {
            "location": "/lib/public/#functions_1", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/lib/public/#connectance", 
            "text": "@autodocs\nconnectance", 
            "title": "Connectance"
        }, 
        {
            "location": "/lib/internals/", 
            "text": "Internal Documentation\n\n\nDocumentation for EcologicalNetwork's internal interface.\n\n\n\n\nIndex\n\n\n\n\nFunctions\n\n\n#\n\n\nBase.copy\n \n \nMethod\n.\n\n\nCreates a copy of a network \u2013 this returns an object with the same type, and the same content.\n\n\nsource\n\n\n#\n\n\nBase.getindex\n \n \nMethod\n.\n\n\nGetindex custom to get interaction value from an EcoNetwork\n\n\nsource\n\n\n#\n\n\nBase.setindex!\n \n \nMethod\n.\n\n\nSetindex for EcoNetwork\n\n\nsource\n\n\n#\n\n\nBase.size\n \n \nMethod\n.\n\n\nReturn the size of the adjacency matrix of an EcoNetwork object.\n\n\nsource\n\n\n#\n\n\nBase.transpose\n \n \nMethod\n.\n\n\nReturn a transposed network with the correct type\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.delta_matrix\n \n \nMethod\n.\n\n\nGet the \u03b4 matrix, representing whether two nodes are part of the same module.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.draw_matrix\n \n \nMethod\n.\n\n\nLow-level function to draw the network.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.inner_swap\n \n \nMethod\n.\n\n\nPerforms an inner swap\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.is_valid\n \n \nMethod\n.\n\n\nThis function will take two matrices and one constraint, and return whether the first matrix is a valid permutation of the second one under a given constraint.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.most_common_label\n \n \nMethod\n.\n\n\nCount most common labels\n\n\nArguments are the network, the community partition, and the species id\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.most_common_label\n \n \nMethod\n.\n\n\nCount most common labels\n\n\nArguments are the network, the community partition, and the species id\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.most_common_label\n \n \nMethod\n.\n\n\nCount most common labels\n\n\nArguments are the network, the community partition, and the species id\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.motif_internal!\n \n \nMethod\n.\n\n\nInternal motif calculations\n\n\nThe two arguments are \nN\n the network and \nm\n the motif adjacency matrix (as a \nDeterministicNetwork\n). The two matrices must have the same size.  The function returns a \nvectorized\n probability of each interaction being in the right state for the motif, \ni.e.\n P if m is 1, and 1 - P if m is 0.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.nodf_axis\n \n \nMethod\n.\n\n\nNODF of a single axis\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.pdi\n \n \nMethod\n.\n\n\nPaired Differences Index for specificity. This function will range the values of each row, so that the strongest link has a value of one.\n\n\njulia\n \npdi\n(\nvec\n([\n1.0\n \n0.0\n \n0.0\n]))\n\n\n1.0\n\n\n\njulia\n \npdi\n(\nvec\n([\n0.0\n \n0.0\n \n1.0\n]))\n\n\n1.0\n\n\n\njulia\n \npdi\n(\nvec\n([\n1.0\n \n1.0\n \n1.0\n]))\n\n\n0.0\n\n\n\n\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.permute_network\n \n \nMethod\n.\n\n\nTake a bipartite network, returns a collection of unique permutations\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.permute_network\n \n \nMethod\n.\n\n\nTake a unipartite network, returns a collection of unique permutations\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.positions\n \n \nMethod\n.\n\n\nReturns the positions in an Array of boolean that are \ntrue\n.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.swap\n \n \nMethod\n.\n\n\nSwaps a bipartite network while enforcing a constraint on degree distribution.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.swap\n \n \nMethod\n.\n\n\nSwaps a unipartite network while enforcing a constraint on degree distribution.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.wnodf_axis\n \n \nMethod\n.\n\n\nWNODF of a single axis\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.\u03b7_axis\n \n \nMethod\n.\n\n\nNestedness of a single axis (called internally by \n\u03b7\n)\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.@checkprob\n \n \nMacro\n.\n\n\nQuite crude way of checking that a number is a probability\n\n\nThe two steps are\n\n\n\n\nThe number should be of the \nFloat64\n type\n\n\nThe number should belong to [0.0,1.0]\n\n\n\n\nsource", 
            "title": "Internals"
        }, 
        {
            "location": "/lib/internals/#internal-documentation", 
            "text": "Documentation for EcologicalNetwork's internal interface.", 
            "title": "Internal Documentation"
        }, 
        {
            "location": "/lib/internals/#index", 
            "text": "", 
            "title": "Index"
        }, 
        {
            "location": "/lib/internals/#functions", 
            "text": "#  Base.copy     Method .  Creates a copy of a network \u2013 this returns an object with the same type, and the same content.  source  #  Base.getindex     Method .  Getindex custom to get interaction value from an EcoNetwork  source  #  Base.setindex!     Method .  Setindex for EcoNetwork  source  #  Base.size     Method .  Return the size of the adjacency matrix of an EcoNetwork object.  source  #  Base.transpose     Method .  Return a transposed network with the correct type  source  #  EcologicalNetwork.delta_matrix     Method .  Get the \u03b4 matrix, representing whether two nodes are part of the same module.  source  #  EcologicalNetwork.draw_matrix     Method .  Low-level function to draw the network.  source  #  EcologicalNetwork.inner_swap     Method .  Performs an inner swap  source  #  EcologicalNetwork.is_valid     Method .  This function will take two matrices and one constraint, and return whether the first matrix is a valid permutation of the second one under a given constraint.  source  #  EcologicalNetwork.most_common_label     Method .  Count most common labels  Arguments are the network, the community partition, and the species id  source  #  EcologicalNetwork.most_common_label     Method .  Count most common labels  Arguments are the network, the community partition, and the species id  source  #  EcologicalNetwork.most_common_label     Method .  Count most common labels  Arguments are the network, the community partition, and the species id  source  #  EcologicalNetwork.motif_internal!     Method .  Internal motif calculations  The two arguments are  N  the network and  m  the motif adjacency matrix (as a  DeterministicNetwork ). The two matrices must have the same size.  The function returns a  vectorized  probability of each interaction being in the right state for the motif,  i.e.  P if m is 1, and 1 - P if m is 0.  source  #  EcologicalNetwork.nodf_axis     Method .  NODF of a single axis  source  #  EcologicalNetwork.pdi     Method .  Paired Differences Index for specificity. This function will range the values of each row, so that the strongest link has a value of one.  julia   pdi ( vec ([ 1.0   0.0   0.0 ]))  1.0  julia   pdi ( vec ([ 0.0   0.0   1.0 ]))  1.0  julia   pdi ( vec ([ 1.0   1.0   1.0 ]))  0.0   source  #  EcologicalNetwork.permute_network     Method .  Take a bipartite network, returns a collection of unique permutations  source  #  EcologicalNetwork.permute_network     Method .  Take a unipartite network, returns a collection of unique permutations  source  #  EcologicalNetwork.positions     Method .  Returns the positions in an Array of boolean that are  true .  source  #  EcologicalNetwork.swap     Method .  Swaps a bipartite network while enforcing a constraint on degree distribution.  source  #  EcologicalNetwork.swap     Method .  Swaps a unipartite network while enforcing a constraint on degree distribution.  source  #  EcologicalNetwork.wnodf_axis     Method .  WNODF of a single axis  source  #  EcologicalNetwork.\u03b7_axis     Method .  Nestedness of a single axis (called internally by  \u03b7 )  source  #  EcologicalNetwork.@checkprob     Macro .  Quite crude way of checking that a number is a probability  The two steps are   The number should be of the  Float64  type  The number should belong to [0.0,1.0]   source", 
            "title": "Functions"
        }
    ]
}