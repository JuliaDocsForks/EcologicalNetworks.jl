{
    "docs": [
        {
            "location": "/", 
            "text": "Analysis of ecological networks\n\n\nThe \nEcologicalNetwork\n package offers a convenient interface to analyse several types of ecological networks. Rather than providing multiple measures of the same property, we selected measures that have been demonstrated to work and be robust.\n\n\nThe structure of this documentation is trying to match (as much as possible) the structure of Delmas \net al.\n (\n2017\n), where most of the measures presented here are reviewed.\n\n\n\n\nOverview of methods\n\n\nThis table gives an overview of the currently available methods, as a function of the network type. In the \nQuantitative\n column, a \nD\n means that the method exists \nbut\n works on the \nDeterministic\n part of the network (\ni.e.\n the information about interaction weight is removed).\n\n\n\n\n\n\n\n\nMeasure type\n\n\nMeasure\n\n\nDeterministic\n\n\nQuantitative\n\n\nProbabilistic\n\n\n\n\n\n\n\n\n\n\ndegree\n\n\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecificity\n\n\nPDI\n\n\n\n\nyes\n\n\n\n\n\n\n\n\n\n\nRR\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconnectance\n\n\n\n\nyes\n\n\nD\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlink density\n\n\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnestedness\n\n\n$\\eta$\n\n\nbipartite\n\n\n\n\nbipartite\n\n\n\n\n\n\n\n\nNODF\n\n\nbipartite\n\n\n\n\n\n\n\n\n\n\n\n\nWNODF\n\n\n\n\nbipartite\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodularity\n\n\n$Q$\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\n\n\n$Q'_R$\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\n\n\nlabel propagation\n\n\nyes\n\n\nyes\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmotif counting\n\n\n\n\nyes\n\n\nD\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnull models\n\n\n1 (connectance)\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n2 (degree)\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n3in (columns)\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n3out (rows)\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nswap\n\n\nfill\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\ngenerality\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\nvulnerability\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\ndegre distribution\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncentrality\n\n\nKatz\n\n\nyes\n\n\n\n\nyes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnumber of paths\n\n\n\n\nyes\n\n\n\n\nyes", 
            "title": "Home"
        }, 
        {
            "location": "/#analysis-of-ecological-networks", 
            "text": "The  EcologicalNetwork  package offers a convenient interface to analyse several types of ecological networks. Rather than providing multiple measures of the same property, we selected measures that have been demonstrated to work and be robust.  The structure of this documentation is trying to match (as much as possible) the structure of Delmas  et al.  ( 2017 ), where most of the measures presented here are reviewed.", 
            "title": "Analysis of ecological networks"
        }, 
        {
            "location": "/#overview-of-methods", 
            "text": "This table gives an overview of the currently available methods, as a function of the network type. In the  Quantitative  column, a  D  means that the method exists  but  works on the  Deterministic  part of the network ( i.e.  the information about interaction weight is removed).     Measure type  Measure  Deterministic  Quantitative  Probabilistic      degree   yes  yes  yes           specificity  PDI   yes      RR  yes             connectance   yes  D  yes           link density   yes             nestedness  $\\eta$  bipartite   bipartite     NODF  bipartite       WNODF   bipartite            modularity  $Q$  yes  yes  yes     $Q'_R$  yes  yes  yes     label propagation  yes  yes  yes           motif counting   yes  D  yes           null models  1 (connectance)  yes       2 (degree)  yes       3in (columns)  yes       3out (rows)  yes             swap  fill  yes       generality  yes       vulnerability  yes       degre distribution  yes             centrality  Katz  yes   yes           number of paths   yes   yes", 
            "title": "Overview of methods"
        }, 
        {
            "location": "/types/", 
            "text": "Informations about types\n\n\nAs there are many ways to represent ecological networks, and the correct way to measure a given property varies in function of the representation, \nEcologicalNetwork\n has a series of built-in types.\n\n\n\n\nType hierarchy\n\n\nThe \nEcologicalNetwork\n package has six main types that are meant to be used by the user: \nBipartiteNetwork\n, \nBipartiteProbaNetwork\n, \nBipartiteQuantiNetwork\n, \nUnipartiteNetwork\n, \nUnipartiteProbaNetwork\n and \nUnipartiteQuantiNetwork\n. All types with \nProba\n in their names are meant to represent probabilistic networks, and are also part of the union type \nProbabilisticNetwork\n. All types \nwithout\n \nProba\n in their name are part of the union type \nDeterministicNetwork\n, and represent networks in which interactions are either present or absent. All types with \nQuanti\n in their names are part of the \nQuantitativeNetwork\n groups, and represent networks with weighted interactions. All types starting with \nBipartite\n are also part of the abstract type \nBipartite\n, and types with \nUnipartite\n in their names are part of the abstract type \nUnipartite\n. Finally, both \nUnipartite\n and \nBipartite\n are part of the abstract type \nEcoNetwork\n.\n\n\nAlthough this may seem convoluted, this is important to understand: when writing functions, you can restrict them to any type of network you want by using the right type in their declaration. You can also check properties of a network just by looking at its type. For example, one can check whether a network \nN\n is bipartite with:\n\n\ntypeof\n(\nN\n)\n \n:\n \nBipartite\n\n\n\n\n\n\nNetworks are represented as two-dimensional matrices. All types are simply wrappers around an adjacency matrix, stored as the \nA\n property of the object. To look at the adjacency matrix of a network \nN\n, one therefore uses \nN.A\n. These matrices must be read as: the existence/probability of an interaction \nfrom\n the species of the \ni\n-th row \nto\n the species in the \nj\n-th column. This implies that the networks are, by default, directed.\n\n\nNote that the type of a network will determine what methods can be applied to it. For example, all measures of variance are only making sense for probabilistic networks.\n\n\n\n\nData types\n\n\nInteractions in deterministic networks are represented as boolean (\ntrue\n/\nfalse\n) values. This is memory efficient, so large networks can be represented (one interactions represented as a boolean uses 8 times fewer memory than the same interaction represented as an integer). This being said, all networks of the \nDeterministicNetwork\n type can be read from matrices of integers, \nas long as these matrices only contain 0 and 1\n.\n\n\nIn probabilistic networks, interactions are stored as floating point (\nFloat64\n) numbers. These values have to be between 0.0 and 1.0, as they represent probabilities. In quantitative networks, interactions are stored as any type of number.\n\n\nNetworks of the \nUnipartite\n class must have the same number of rows and columns. The species in the rows and columns are the same. Networks of the \nBipartite\n class are expected to have different numbers of rows and columns, as the species in rows and columns are different species. It is possible to convert a network from \nBipartite\n to \nUnipartite\n using the \nmake_unipartite\n function:\n\n\nusing\n \nEcologicalNetwork\n\n\nB\n \n=\n \nBipartiteNetwork\n(\nrand\n(\nBool\n,\n \n(\n3\n,\n \n5\n)))\n\n\nU\n \n=\n \nmake_unipartite\n(\nB\n)\n\n\nrichness\n(\nU\n)\n \n==\n \nrichness\n(\nB\n)\n\n\n\n\n\n\ntrue\n\n\n\n\n\nThe documentation for \nmake_unipartite\n gives additional explanations about how the conversion is done. In the overwhelming majority of cases, applying any measure to a bipartite network, and to the same network made unipartite, should give the same results (connectance is one notable example).\n\n\n\n\nType reference\n\n\n#\n\n\nEcologicalNetwork.Bipartite\n \n \nType\n.\n\n\nAll bipartite networks\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.BipartiteNetwork\n \n \nType\n.\n\n\nA bipartite deterministic network is a two-dimensional array of boolean values.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.BipartiteNetwork\n \n \nMethod\n.\n\n\nConstruct a bipartite network from a matrix of integer\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.EcoNetwork\n \n \nType\n.\n\n\nThis is an abstract type that allows to generate functions for all sorts of networks. All other types are derived from this one.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.Unipartite\n \n \nType\n.\n\n\nAll unipartite networks\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.UnipartiteNetwork\n \n \nType\n.\n\n\nAn unipartite deterministic network.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.UnipartiteNetwork\n \n \nMethod\n.\n\n\nConstruct an unipartite network from a matrix of integer\n\n\nsource", 
            "title": "Different types of networks"
        }, 
        {
            "location": "/types/#informations-about-types", 
            "text": "As there are many ways to represent ecological networks, and the correct way to measure a given property varies in function of the representation,  EcologicalNetwork  has a series of built-in types.", 
            "title": "Informations about types"
        }, 
        {
            "location": "/types/#type-hierarchy", 
            "text": "The  EcologicalNetwork  package has six main types that are meant to be used by the user:  BipartiteNetwork ,  BipartiteProbaNetwork ,  BipartiteQuantiNetwork ,  UnipartiteNetwork ,  UnipartiteProbaNetwork  and  UnipartiteQuantiNetwork . All types with  Proba  in their names are meant to represent probabilistic networks, and are also part of the union type  ProbabilisticNetwork . All types  without   Proba  in their name are part of the union type  DeterministicNetwork , and represent networks in which interactions are either present or absent. All types with  Quanti  in their names are part of the  QuantitativeNetwork  groups, and represent networks with weighted interactions. All types starting with  Bipartite  are also part of the abstract type  Bipartite , and types with  Unipartite  in their names are part of the abstract type  Unipartite . Finally, both  Unipartite  and  Bipartite  are part of the abstract type  EcoNetwork .  Although this may seem convoluted, this is important to understand: when writing functions, you can restrict them to any type of network you want by using the right type in their declaration. You can also check properties of a network just by looking at its type. For example, one can check whether a network  N  is bipartite with:  typeof ( N )   :   Bipartite   Networks are represented as two-dimensional matrices. All types are simply wrappers around an adjacency matrix, stored as the  A  property of the object. To look at the adjacency matrix of a network  N , one therefore uses  N.A . These matrices must be read as: the existence/probability of an interaction  from  the species of the  i -th row  to  the species in the  j -th column. This implies that the networks are, by default, directed.  Note that the type of a network will determine what methods can be applied to it. For example, all measures of variance are only making sense for probabilistic networks.", 
            "title": "Type hierarchy"
        }, 
        {
            "location": "/types/#data-types", 
            "text": "Interactions in deterministic networks are represented as boolean ( true / false ) values. This is memory efficient, so large networks can be represented (one interactions represented as a boolean uses 8 times fewer memory than the same interaction represented as an integer). This being said, all networks of the  DeterministicNetwork  type can be read from matrices of integers,  as long as these matrices only contain 0 and 1 .  In probabilistic networks, interactions are stored as floating point ( Float64 ) numbers. These values have to be between 0.0 and 1.0, as they represent probabilities. In quantitative networks, interactions are stored as any type of number.  Networks of the  Unipartite  class must have the same number of rows and columns. The species in the rows and columns are the same. Networks of the  Bipartite  class are expected to have different numbers of rows and columns, as the species in rows and columns are different species. It is possible to convert a network from  Bipartite  to  Unipartite  using the  make_unipartite  function:  using   EcologicalNetwork  B   =   BipartiteNetwork ( rand ( Bool ,   ( 3 ,   5 )))  U   =   make_unipartite ( B )  richness ( U )   ==   richness ( B )   true  The documentation for  make_unipartite  gives additional explanations about how the conversion is done. In the overwhelming majority of cases, applying any measure to a bipartite network, and to the same network made unipartite, should give the same results (connectance is one notable example).", 
            "title": "Data types"
        }, 
        {
            "location": "/types/#type-reference", 
            "text": "#  EcologicalNetwork.Bipartite     Type .  All bipartite networks  source  #  EcologicalNetwork.BipartiteNetwork     Type .  A bipartite deterministic network is a two-dimensional array of boolean values.  source  #  EcologicalNetwork.BipartiteNetwork     Method .  Construct a bipartite network from a matrix of integer  source  #  EcologicalNetwork.EcoNetwork     Type .  This is an abstract type that allows to generate functions for all sorts of networks. All other types are derived from this one.  source  #  EcologicalNetwork.Unipartite     Type .  All unipartite networks  source  #  EcologicalNetwork.UnipartiteNetwork     Type .  An unipartite deterministic network.  source  #  EcologicalNetwork.UnipartiteNetwork     Method .  Construct an unipartite network from a matrix of integer  source", 
            "title": "Type reference"
        }, 
        {
            "location": "/data/", 
            "text": "Datasets\n\n\nEcologicalNetwork\n comes with a few datasets.\n\n\n\n\nUnipartite networks\n\n\n#\n\n\nEcologicalNetwork.stony\n \n \nFunction\n.\n\n\nStony food web\n\n\nStony food web from Thompson \n Townsend. This was sampled in a tussock grassland near Otago, New Zealand. Note that there is, in the original matrix, a species with no interactions. It is removed when generating the network.\n\n\nsource\n\n\n\n\nBipartite networks\n\n\n#\n\n\nEcologicalNetwork.ollerton\n \n \nFunction\n.\n\n\nFish-anemone interactions\n\n\nFrom Ollerton et al. 2007\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.mcmullen\n \n \nFunction\n.\n\n\nPlant-flower visitor interactions in the Galapagos\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.robertson\n \n \nFunction\n.\n\n\nPollination interactions\n\n\nFrom Robertson 1927, in an agricultural area dominated by crops, with some natural forest and pasture.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.bluthgen\n \n \nFunction\n.\n\n\nNumber of visits from Bluthgen et al XXX\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.woods\n \n \nFunction\n.\n\n\nLake of the Woods host-parasite data\n\n\nInteractions content are prevalence.\n\n\nsource\n\n\n\n\nNetwork collections\n\n\n#\n\n\nEcologicalNetwork.soilphagebacteria\n \n \nFunction\n.\n\n\nSoil-isolated phage-bacteria networks\n\n\nsoilphagebacteria(i::Int64=1)\n\n\n\n\n\nInteractions are the impact of phage on the bacteria.\n\n\nhttps://figshare.com/articles/Phage_bacteria_networks_isolated_in_soil/696102\n\n\nTakes a positional argument \ni\n, indicating which network (from 1 to 5) to return.\n\n\nsource", 
            "title": "Datasets"
        }, 
        {
            "location": "/data/#datasets", 
            "text": "EcologicalNetwork  comes with a few datasets.", 
            "title": "Datasets"
        }, 
        {
            "location": "/data/#unipartite-networks", 
            "text": "#  EcologicalNetwork.stony     Function .  Stony food web  Stony food web from Thompson   Townsend. This was sampled in a tussock grassland near Otago, New Zealand. Note that there is, in the original matrix, a species with no interactions. It is removed when generating the network.  source", 
            "title": "Unipartite networks"
        }, 
        {
            "location": "/data/#bipartite-networks", 
            "text": "#  EcologicalNetwork.ollerton     Function .  Fish-anemone interactions  From Ollerton et al. 2007  source  #  EcologicalNetwork.mcmullen     Function .  Plant-flower visitor interactions in the Galapagos  source  #  EcologicalNetwork.robertson     Function .  Pollination interactions  From Robertson 1927, in an agricultural area dominated by crops, with some natural forest and pasture.  source  #  EcologicalNetwork.bluthgen     Function .  Number of visits from Bluthgen et al XXX  source  #  EcologicalNetwork.woods     Function .  Lake of the Woods host-parasite data  Interactions content are prevalence.  source", 
            "title": "Bipartite networks"
        }, 
        {
            "location": "/data/#network-collections", 
            "text": "#  EcologicalNetwork.soilphagebacteria     Function .  Soil-isolated phage-bacteria networks  soilphagebacteria(i::Int64=1)  Interactions are the impact of phage on the bacteria.  https://figshare.com/articles/Phage_bacteria_networks_isolated_in_soil/696102  Takes a positional argument  i , indicating which network (from 1 to 5) to return.  source", 
            "title": "Network collections"
        }, 
        {
            "location": "/usecase/nestedness/", 
            "text": "Measuring the nestedness of a network\n\n\nThe goal of this use case is to (i) measure the nestedness of a bipartite network and (ii) evaluate whether it differs from the random expectation. We will use the \nollerton\n data, which are reasonably small, and the \n\u03b7\n measure of nestedness (note that \nnodf\n is also available).\n\n\nusing\n \nEcologicalNetwork\n\n\n\n# Get the data in an object\n\n\nN\n \n=\n \nollerton\n();\n\n\n\n# We will create a function to return the nestedness of the entire\n\n\n# network instead of an array of nestedness values\n\n\nnest\n \n=\n \n(\nx\n)\n \n-\n \n\u03b7\n(\nx\n)[\n1\n]\n\n\n\n# We will now generate a series of random networks preserving the degree\n\n\n# distribution\n\n\nS\n \n=\n \nnullmodel\n(\nnull2\n(\nN\n));\n\n\n\n# There is a function to apply a test rapidly to randomized networks. In this\n\n\n# situation we are interested in testing the fact that the network is more\n\n\n# nested than expected by chance.\n\n\nresults\n \n=\n \ntest_network_property\n(\nN\n,\n \nnest\n,\n \nS\n,\n\n        \ntest\n=:\ngreater\n);\n\n\n\n# We can print the results\n\n\nprintln\n(\n\n        \nThe original network has a nestedness of \n,\n\n        \nround\n(\nnest\n(\nN\n),\n \n3\n),\n\n        \n,\n\\n\n,\n \nwhich is greater than expected by chance (p ~ \n,\n\n        \nround\n(\nresults\n.\npval\n,\n \n4\n),\n\n        \n) -- \n,\n\n        \nresults\n.\nn\n,\n\n        \n random networks.\n\n        \n)\n\n\n\n\n\n\nThe original network has a nestedness of 0.641,\nwhich is greater than expected by chance (p ~ 0.0) -- 316 random networks.\n\n\n\n\n\nIn this simple example, we used \nnullmodel\n to generate random realizations of a network, and \ntest_network_property\n to evaluate whether the observed nestedness was observed by chance. As it stands, all randomized networks had \nlower\n values, and so the \np\n-value is (essentially) null. In short, this network is significantly more nested than expected by chance knowing its degree distribution.\n\n\nWe can also decide to plot the network to visualize what it looks like:\n\n\njulia\n \nusing\n \nEcologicalNetwork\n\n\n\njulia\n \nN\n \n=\n \nollerton\n()\n\n\nEcologicalNetwork\n.\nBipartiteNetwork\n(\nBool\n[\ntrue\n \ntrue\n \n\u2026\n \ntrue\n \ntrue\n;\n \ntrue\n \ntrue\n \n\u2026\n \nfalse\n \nfalse\n;\n \n\u2026\n \n;\n \nfalse\n \nfalse\n \n\u2026\n \nfalse\n \nfalse\n;\n \nfalse\n \ntrue\n \n\u2026\n \nfalse\n \nfalse\n])\n\n\n\njulia\n \nplot_network\n(\nN\n,\n \nfile\n=\nollerton.png\n)\n\n\n\n\n\n\nThis is what the result should look like:", 
            "title": "Nestedness"
        }, 
        {
            "location": "/usecase/nestedness/#measuring-the-nestedness-of-a-network", 
            "text": "The goal of this use case is to (i) measure the nestedness of a bipartite network and (ii) evaluate whether it differs from the random expectation. We will use the  ollerton  data, which are reasonably small, and the  \u03b7  measure of nestedness (note that  nodf  is also available).  using   EcologicalNetwork  # Get the data in an object  N   =   ollerton ();  # We will create a function to return the nestedness of the entire  # network instead of an array of nestedness values  nest   =   ( x )   -   \u03b7 ( x )[ 1 ]  # We will now generate a series of random networks preserving the degree  # distribution  S   =   nullmodel ( null2 ( N ));  # There is a function to apply a test rapidly to randomized networks. In this  # situation we are interested in testing the fact that the network is more  # nested than expected by chance.  results   =   test_network_property ( N ,   nest ,   S , \n         test =: greater );  # We can print the results  println ( \n         The original network has a nestedness of  , \n         round ( nest ( N ),   3 ), \n         , \\n ,   which is greater than expected by chance (p ~  , \n         round ( results . pval ,   4 ), \n         ) --  , \n         results . n , \n          random networks. \n         )   The original network has a nestedness of 0.641,\nwhich is greater than expected by chance (p ~ 0.0) -- 316 random networks.  In this simple example, we used  nullmodel  to generate random realizations of a network, and  test_network_property  to evaluate whether the observed nestedness was observed by chance. As it stands, all randomized networks had  lower  values, and so the  p -value is (essentially) null. In short, this network is significantly more nested than expected by chance knowing its degree distribution.  We can also decide to plot the network to visualize what it looks like:  julia   using   EcologicalNetwork  julia   N   =   ollerton ()  EcologicalNetwork . BipartiteNetwork ( Bool [ true   true   \u2026   true   true ;   true   true   \u2026   false   false ;   \u2026   ;   false   false   \u2026   false   false ;   false   true   \u2026   false   false ])  julia   plot_network ( N ,   file = ollerton.png )   This is what the result should look like:", 
            "title": "Measuring the nestedness of a network"
        }, 
        {
            "location": "/usecase/modularity/", 
            "text": "Measuring the modularity\n\n\nIn this example, we will use \nlabel_propagation\n to optimize the modularity of a network. The data are from the \nmcmullen\n dataset.\n\n\nusing\n \nEcologicalNetwork\n\n\n\n# Get the data in an object\n\n\nN\n \n=\n \nmcmullen\n();\n\n\n\n\n\n\nEcologicalNetwork.BipartiteNetwork(Bool[false false \u2026 false false; false false \u2026 false false; \u2026 ; true false \u2026 false false; true true \u2026 true true])\n\n\n\n\n\nThe next step is to generate starting communities for every species. We will assign species to random initial modules.\n\n\nL\n \n=\n \nrand\n(\n1\n:\nrichness\n(\nN\n),\n \nrichness\n(\nN\n));\n\n\n\n\n\n\n159-element Array{Int64,1}:\n 114\n  69\n  58\n  86\n  86\n  60\n  22\n 120\n  20\n  94\n   \u22ee\n 100\n  99\n  58\n 137\n  54\n 139\n  42\n  83\n   7\n\n\n\n\n\nWe can now start a repeated number of attempts to find the best partition. If \njulia\n is started in parallel, this will use all assigned CPUs.\n\n\nM\n \n=\n \nmodularity\n(\nN\n,\n \nL\n,\n \nreplicates\n=\n100\n);\n\n\n\n# Finally, we can get the best partition\n\n\nb_part\n \n=\n \nbest_partition\n(\nM\n);\n\n\n\n# And print its modularity and number of modules\n\n\nprintln\n(\nQ: \n,\n\n        \nround\n(\nb_part\n[\n1\n]\n.\nQ\n,\n \n2\n),\n\n        \n |c|: \n,\n\n        \nlength\n(\nunique\n(\nb_part\n[\n1\n]\n.\nL\n))\n\n        \n)\n\n\n\n\n\n\nQ\n:\n \n0.54\n \n|\nc\n|:\n \n16", 
            "title": "Modularity"
        }, 
        {
            "location": "/usecase/modularity/#measuring-the-modularity", 
            "text": "In this example, we will use  label_propagation  to optimize the modularity of a network. The data are from the  mcmullen  dataset.  using   EcologicalNetwork  # Get the data in an object  N   =   mcmullen ();   EcologicalNetwork.BipartiteNetwork(Bool[false false \u2026 false false; false false \u2026 false false; \u2026 ; true false \u2026 false false; true true \u2026 true true])  The next step is to generate starting communities for every species. We will assign species to random initial modules.  L   =   rand ( 1 : richness ( N ),   richness ( N ));   159-element Array{Int64,1}:\n 114\n  69\n  58\n  86\n  86\n  60\n  22\n 120\n  20\n  94\n   \u22ee\n 100\n  99\n  58\n 137\n  54\n 139\n  42\n  83\n   7  We can now start a repeated number of attempts to find the best partition. If  julia  is started in parallel, this will use all assigned CPUs.  M   =   modularity ( N ,   L ,   replicates = 100 );  # Finally, we can get the best partition  b_part   =   best_partition ( M );  # And print its modularity and number of modules  println ( Q:  , \n         round ( b_part [ 1 ] . Q ,   2 ), \n          |c|:  , \n         length ( unique ( b_part [ 1 ] . L )) \n         )   Q :   0.54   | c |:   16", 
            "title": "Measuring the modularity"
        }, 
        {
            "location": "/usecase/motifs/", 
            "text": "Counting motifs\n\n\nIn this use case, we will count the number of motifs in a food web. Specifically, we will count how many times there is a linear food chain (A\u2192B\u2192C) between three species.\n\n\nusing\n \nEcologicalNetwork\n\n\n\n# Load a network\n\n\nN\n \n=\n \nstony\n();\n\n\n\n# List of motifs\n\n\nm\n \n=\n \nunipartitemotifs\n();\n\n\n\n\n\n\nDict{Symbol,EcologicalNetwork.UnipartiteNetwork} with 13 entries:\n  :S4 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :S1 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :D6 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; true false t\u2026\n  :D3 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false false true; false false\u2026\n  :S2 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n  :D8 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; true false f\u2026\n  :D1 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n  :D7 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; true false f\u2026\n  :D5 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :S3 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :D4 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :S5 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n  :D2 =\n EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n\n\n\n\n\nThe \nm\n object has 13 different motifs, named as in \nStouffer \net al.\n (2007)\n. The function \nunipartitemotifs\n will generate them when needed. Let's look at the \nm[:S1]\n motif:\n\n\nplot_network\n(\nm\n[\n:\nS1\n],\n \nfile\n=\nmotifs1.png\n)\n\n\n\n\n\n\n\n\nThe function to count motifs is called \nmotif\n, and returns a count: how many triplets of species are in a given conformation. For example:\n\n\ns1\n \n=\n \nmotif\n(\nN\n,\n \nm\n[\n:\nS1\n])\n\n\n\n\n\n\n1035.0\n\n\n\n\n\nWe may be interested in knowing whether this motif is over or under-represented in the empirical network, compared to a random expectation. To determine this, we will shuffle interactions around in a way that preserves the number of interactions\nand\n the degree distribution of all species, using \nswaps\n. We will create 100 replicated networks to test.\n\n\npermutations\n \n=\n \nswaps\n(\nN\n,\n \n100\n,\n \nconstraint\n=:\ndegree\n)\n\n\n\nms1\n \n=\n \nmap\n(\nx\n \n-\n \nmotif\n(\nx\n,\n \nm\n[\n:\nS1\n]),\n \npermutations\n)\n\n\n\n\n\n\n100-element Array{Float64,1}:\n 539.0\n 587.0\n 506.0\n 613.0\n 595.0\n 578.0\n 506.0\n 602.0\n 547.0\n 588.0\n   \u22ee\n 545.0\n 508.0\n 492.0\n 539.0\n 589.0\n 537.0\n 543.0\n 689.0\n 678.0", 
            "title": "Motifs"
        }, 
        {
            "location": "/usecase/motifs/#counting-motifs", 
            "text": "In this use case, we will count the number of motifs in a food web. Specifically, we will count how many times there is a linear food chain (A\u2192B\u2192C) between three species.  using   EcologicalNetwork  # Load a network  N   =   stony ();  # List of motifs  m   =   unipartitemotifs ();   Dict{Symbol,EcologicalNetwork.UnipartiteNetwork} with 13 entries:\n  :S4 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :S1 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :D6 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; true false t\u2026\n  :D3 =  EcologicalNetwork.UnipartiteNetwork(Bool[false false true; false false\u2026\n  :S2 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n  :D8 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; true false f\u2026\n  :D1 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n  :D7 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; true false f\u2026\n  :D5 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :S3 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :D4 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true false; false false\u2026\n  :S5 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026\n  :D2 =  EcologicalNetwork.UnipartiteNetwork(Bool[false true true; false false \u2026  The  m  object has 13 different motifs, named as in  Stouffer  et al.  (2007) . The function  unipartitemotifs  will generate them when needed. Let's look at the  m[:S1]  motif:  plot_network ( m [ : S1 ],   file = motifs1.png )    The function to count motifs is called  motif , and returns a count: how many triplets of species are in a given conformation. For example:  s1   =   motif ( N ,   m [ : S1 ])   1035.0  We may be interested in knowing whether this motif is over or under-represented in the empirical network, compared to a random expectation. To determine this, we will shuffle interactions around in a way that preserves the number of interactions and  the degree distribution of all species, using  swaps . We will create 100 replicated networks to test.  permutations   =   swaps ( N ,   100 ,   constraint =: degree )  ms1   =   map ( x   -   motif ( x ,   m [ : S1 ]),   permutations )   100-element Array{Float64,1}:\n 539.0\n 587.0\n 506.0\n 613.0\n 595.0\n 578.0\n 506.0\n 602.0\n 547.0\n 588.0\n   \u22ee\n 545.0\n 508.0\n 492.0\n 539.0\n 589.0\n 537.0\n 543.0\n 689.0\n 678.0", 
            "title": "Counting motifs"
        }, 
        {
            "location": "/community/nlinks/", 
            "text": "Number of links and connectance\n\n\n\n\nEcologicalNetwork.connectance\n\n\nEcologicalNetwork.connectance_var\n\n\nEcologicalNetwork.linkage_density\n\n\n\n\n\n\nNumber of links\n\n\nlinks\nlinks_number\nlinks_var\n\n\n\n\n\n\n\nLinkage density\n\n\n#\n\n\nEcologicalNetwork.linkage_density\n \n \nFunction\n.\n\n\nlinkage_density(N::DeterministicNetwork)\n\n\n\n\n\nNumber of links divided by species richness.\n\n\nsource\n\n\n\n\nConnectance\n\n\n#\n\n\nEcologicalNetwork.connectance\n \n \nFunction\n.\n\n\nconnectance(N::EcoNetwork)\n\n\n\n\n\nNumber of links divided by the number of possible interactions. In unipartite networks, this is $L/S^2$. In bipartite networks, this is $L/(T \u00d7 B)$.\n\n\nsource\n\n\nconnectance(N::QuantitativeNetwork)\n\n\n\n\n\nConnectance of a quantitative network \u2013 the information on link weight is ignored.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.connectance_var\n \n \nFunction\n.\n\n\nconnectance_var(N::ProbabilisticNetwork)\n\n\n\n\n\nExpected variance of the connectance for a probabilistic matrix, measured as the variance of the number of links divided by the squared size of the matrix.\n\n\nsource", 
            "title": "Linkage density and connectance"
        }, 
        {
            "location": "/community/nlinks/#number-of-links-and-connectance", 
            "text": "EcologicalNetwork.connectance  EcologicalNetwork.connectance_var  EcologicalNetwork.linkage_density", 
            "title": "Number of links and connectance"
        }, 
        {
            "location": "/community/nlinks/#number-of-links", 
            "text": "links\nlinks_number\nlinks_var", 
            "title": "Number of links"
        }, 
        {
            "location": "/community/nlinks/#linkage-density", 
            "text": "#  EcologicalNetwork.linkage_density     Function .  linkage_density(N::DeterministicNetwork)  Number of links divided by species richness.  source", 
            "title": "Linkage density"
        }, 
        {
            "location": "/community/nlinks/#connectance", 
            "text": "#  EcologicalNetwork.connectance     Function .  connectance(N::EcoNetwork)  Number of links divided by the number of possible interactions. In unipartite networks, this is $L/S^2$. In bipartite networks, this is $L/(T \u00d7 B)$.  source  connectance(N::QuantitativeNetwork)  Connectance of a quantitative network \u2013 the information on link weight is ignored.  source  #  EcologicalNetwork.connectance_var     Function .  connectance_var(N::ProbabilisticNetwork)  Expected variance of the connectance for a probabilistic matrix, measured as the variance of the number of links divided by the squared size of the matrix.  source", 
            "title": "Connectance"
        }, 
        {
            "location": "/community/degree/", 
            "text": "Degree distribution and specificity\n\n\n\n\nEcologicalNetwork.degree\n\n\nEcologicalNetwork.degree_in\n\n\nEcologicalNetwork.degree_in_var\n\n\nEcologicalNetwork.degree_out\n\n\nEcologicalNetwork.degree_out_var\n\n\nEcologicalNetwork.degree_var\n\n\nEcologicalNetwork.richness\n\n\nEcologicalNetwork.specificity\n\n\n\n\n\n\nSpecies richness\n\n\n#\n\n\nEcologicalNetwork.richness\n \n \nFunction\n.\n\n\nRichness (number of species) in a bipartite network\n\n\nsource\n\n\nRichness (number of species) in a unipartite network\n\n\nsource\n\n\n\n\nCounting degrees\n\n\n#\n\n\nEcologicalNetwork.degree\n \n \nFunction\n.\n\n\nDegree of a unipartite graph\n\n\ndegree(N::Unipartite)\n\n\n\n\n\nsource\n\n\nDegree of a bipartite graph\n\n\ndegree(N::Bipartite)\n\n\n\n\n\nThis is a concatenation of the out degree and the in degrees of nodes on both sizes, as measured by making the graph unipartite first. Rows are first, columns second.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.degree_out\n \n \nFunction\n.\n\n\ndegree_out(N::EcoNetwork)\n\n\n\n\n\nExpected number of outgoing degrees.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.degree_in\n \n \nFunction\n.\n\n\nExpected number of ingoing degrees.\n\n\ndegree_in(N::EcoNetwork)\n\n\n\n\n\nsource\n\n\nFor probabilistic networks only, there are measures of degree variance:\n\n\n#\n\n\nEcologicalNetwork.degree_var\n \n \nFunction\n.\n\n\ndegree_var(N::UnipartiteProbaNetwork)\n\n\n\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.degree_out_var\n \n \nFunction\n.\n\n\ndegree_out_var(N::ProbabilisticNetwork)\n\n\n\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.degree_in_var\n \n \nFunction\n.\n\n\ndegree_in_var(N::ProbabilisticNetwork)\n\n\n\n\n\nsource\n\n\n\n\nMeaasures of specificity\n\n\n#\n\n\nEcologicalNetwork.specificity\n \n \nFunction\n.\n\n\nResource-range\n\n\nspecificity(N::DeterministicNetwork)\n\n\n\n\n\nMeasure of specificity in a deterministic network. This returns a value between 0 and 1, where 1 indicates maximal specificity.\n\n\njulia\n \nN\n \n=\n \nBipartiteNetwork\n(\neye\n(\nBool\n,\n \n10\n));\n\n\n\njulia\n \nspecificity\n(\nN\n)[\n1\n]\n\n\n1.0\n\n\n\n\n\n\nsource\n\n\nPaired Differences Index\n\n\nspecificity(N::QuantitativeNetwork)\n\n\n\n\n\nMeasure of specificity in a quantitative network. This returns a value between 0 and 1, where 1 indicates maximal specificity. Note that the PDI is measured species-wise, and the maximal interaction strength of every species is set to 1.\n\n\njulia\n \nN\n \n=\n \nBipartiteNetwork\n(\neye\n(\nInt64\n,\n \n10\n));\n\n\n\njulia\n \nspecificity\n(\nN\n)[\n1\n]\n\n\n1.0\n\n\n\n\n\n\nsource", 
            "title": "Degree and specificity"
        }, 
        {
            "location": "/community/degree/#degree-distribution-and-specificity", 
            "text": "EcologicalNetwork.degree  EcologicalNetwork.degree_in  EcologicalNetwork.degree_in_var  EcologicalNetwork.degree_out  EcologicalNetwork.degree_out_var  EcologicalNetwork.degree_var  EcologicalNetwork.richness  EcologicalNetwork.specificity", 
            "title": "Degree distribution and specificity"
        }, 
        {
            "location": "/community/degree/#species-richness", 
            "text": "#  EcologicalNetwork.richness     Function .  Richness (number of species) in a bipartite network  source  Richness (number of species) in a unipartite network  source", 
            "title": "Species richness"
        }, 
        {
            "location": "/community/degree/#counting-degrees", 
            "text": "#  EcologicalNetwork.degree     Function .  Degree of a unipartite graph  degree(N::Unipartite)  source  Degree of a bipartite graph  degree(N::Bipartite)  This is a concatenation of the out degree and the in degrees of nodes on both sizes, as measured by making the graph unipartite first. Rows are first, columns second.  source  #  EcologicalNetwork.degree_out     Function .  degree_out(N::EcoNetwork)  Expected number of outgoing degrees.  source  #  EcologicalNetwork.degree_in     Function .  Expected number of ingoing degrees.  degree_in(N::EcoNetwork)  source  For probabilistic networks only, there are measures of degree variance:  #  EcologicalNetwork.degree_var     Function .  degree_var(N::UnipartiteProbaNetwork)  source  #  EcologicalNetwork.degree_out_var     Function .  degree_out_var(N::ProbabilisticNetwork)  source  #  EcologicalNetwork.degree_in_var     Function .  degree_in_var(N::ProbabilisticNetwork)  source", 
            "title": "Counting degrees"
        }, 
        {
            "location": "/community/degree/#meaasures-of-specificity", 
            "text": "#  EcologicalNetwork.specificity     Function .  Resource-range  specificity(N::DeterministicNetwork)  Measure of specificity in a deterministic network. This returns a value between 0 and 1, where 1 indicates maximal specificity.  julia   N   =   BipartiteNetwork ( eye ( Bool ,   10 ));  julia   specificity ( N )[ 1 ]  1.0   source  Paired Differences Index  specificity(N::QuantitativeNetwork)  Measure of specificity in a quantitative network. This returns a value between 0 and 1, where 1 indicates maximal specificity. Note that the PDI is measured species-wise, and the maximal interaction strength of every species is set to 1.  julia   N   =   BipartiteNetwork ( eye ( Int64 ,   10 ));  julia   specificity ( N )[ 1 ]  1.0   source", 
            "title": "Meaasures of specificity"
        }, 
        {
            "location": "/community/motifs/", 
            "text": "Counting motifs\n\n\nThere are a number of ways to...\n\n\n\n\nNote\n\n\nThe enumeration of motifs can take a little while. It depends on the number of nodes in the networks, and in the number of nodes in the motif. It may be wise, in case you want to count several motifs on a single network, to use Julia's parallel computing abilities to speed things up.\n\n\n\n\n\n\nHow it works\n\n\nInternally, the code to count motifs is \nNot Elegant\n\u2122. Every motif is represented by its adjacency matrix, as a \nDeterministicNetwork\n object. Then \nall\n possible induced sub-graphs with the same number of nodes (at either level if this is a \nBipartite\n) are extracted, and matched against all \nunique\n possible permutations of the motif. If there is a match, then this induced subgraph is an instance of this motif.\n\n\n#\n\n\nEcologicalNetwork.motif\n \n \nFunction\n.\n\n\nCount motifs\n\n\nmotif(N::EcoNetwork, m::DeterministicNetwork)\n\n\n\n\n\nIn a network \nN\n, counts the number of time a motif \nm\n appears. In the case of a probabilistic network, \nN\n is the expected number of motifs. In the case of a quantitative network, \nN\n is the number of times the motif appears in the unweighted network.\n\n\nNote that because self-edges (\na.k.a.\n loops, or cannibalism) are \nnot\n counted in the motifs (the adjacency matrix is treated as if it had all diagonal elements set to 0).\n\n\nArguments:\n\n\n\n\nN::EcoNetwork\n, the network in which to count the motifs\n\n\nm::DeterministicNetwork\n, the adjacency matrix of the motif\n\n\n\n\nsource\n\n\n\n\nCaveats\n\n\nThe motifs are counted in a way that ignore self-links. This should not be an issue most of the time, and was also the ways this was done in most publications counting motifs in ecological networks.\n\n\n\n\nUsual motifs\n\n\n#\n\n\nEcologicalNetwork.unipartitemotifs\n \n \nFunction\n.\n\n\nUnipartite motifs\n\n\nunipartitemotifs()\n\n\n\n\n\nThe names of the motifs come from Stouffer et al. (2007) \u2013 especially Fig. 1, available online at \nhttp://rspb.royalsocietypublishing.org/content/274/1621/1931.figures-only\n\n\nsource", 
            "title": "Interaction motifs"
        }, 
        {
            "location": "/community/motifs/#counting-motifs", 
            "text": "There are a number of ways to...   Note  The enumeration of motifs can take a little while. It depends on the number of nodes in the networks, and in the number of nodes in the motif. It may be wise, in case you want to count several motifs on a single network, to use Julia's parallel computing abilities to speed things up.", 
            "title": "Counting motifs"
        }, 
        {
            "location": "/community/motifs/#how-it-works", 
            "text": "Internally, the code to count motifs is  Not Elegant \u2122. Every motif is represented by its adjacency matrix, as a  DeterministicNetwork  object. Then  all  possible induced sub-graphs with the same number of nodes (at either level if this is a  Bipartite ) are extracted, and matched against all  unique  possible permutations of the motif. If there is a match, then this induced subgraph is an instance of this motif.  #  EcologicalNetwork.motif     Function .  Count motifs  motif(N::EcoNetwork, m::DeterministicNetwork)  In a network  N , counts the number of time a motif  m  appears. In the case of a probabilistic network,  N  is the expected number of motifs. In the case of a quantitative network,  N  is the number of times the motif appears in the unweighted network.  Note that because self-edges ( a.k.a.  loops, or cannibalism) are  not  counted in the motifs (the adjacency matrix is treated as if it had all diagonal elements set to 0).  Arguments:   N::EcoNetwork , the network in which to count the motifs  m::DeterministicNetwork , the adjacency matrix of the motif   source", 
            "title": "How it works"
        }, 
        {
            "location": "/community/motifs/#caveats", 
            "text": "The motifs are counted in a way that ignore self-links. This should not be an issue most of the time, and was also the ways this was done in most publications counting motifs in ecological networks.", 
            "title": "Caveats"
        }, 
        {
            "location": "/community/motifs/#usual-motifs", 
            "text": "#  EcologicalNetwork.unipartitemotifs     Function .  Unipartite motifs  unipartitemotifs()  The names of the motifs come from Stouffer et al. (2007) \u2013 especially Fig. 1, available online at  http://rspb.royalsocietypublishing.org/content/274/1621/1931.figures-only  source", 
            "title": "Usual motifs"
        }, 
        {
            "location": "/community/nestedness/", 
            "text": "Nestedness\n\n\n#\n\n\nEcologicalNetwork.nodf\n \n \nFunction\n.\n\n\nNestedness based on Overlap and Decreasing Fill\n\n\nnodf(N::Union{BipartiteNetwork,BipartiteQuantiNetwork})\n\n\n\n\n\nIf the network is quantitative, then \nWNODF\n is measured instead of \nNODF\n. Note that in \nall\n situations, the value goes between 0 (not nested) to 1 (perfectly nested). This is a change with regard to the original papers, in which the maximal value is 100. The values returned are the nestedness of the network, of the columns, and of the rows.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.\u03b7\n \n \nFunction\n.\n\n\nNestedness \u03b7 of a matrix\n\n\n\u03b7(N::Union{BipartiteNetwork, BipartiteProbaNetwork})\n\n\nUsing the Bastolla et al. (XXXX) measure\n\n\nReturns three values:\n\n\n\n\nnestedness of the entire matrix\n\n\nnestedness of the columns\n\n\nnestedness of the rows\n\n\n\n\nsource", 
            "title": "Nestedness"
        }, 
        {
            "location": "/community/nestedness/#nestedness", 
            "text": "#  EcologicalNetwork.nodf     Function .  Nestedness based on Overlap and Decreasing Fill  nodf(N::Union{BipartiteNetwork,BipartiteQuantiNetwork})  If the network is quantitative, then  WNODF  is measured instead of  NODF . Note that in  all  situations, the value goes between 0 (not nested) to 1 (perfectly nested). This is a change with regard to the original papers, in which the maximal value is 100. The values returned are the nestedness of the network, of the columns, and of the rows.  source  #  EcologicalNetwork.\u03b7     Function .  Nestedness \u03b7 of a matrix  \u03b7(N::Union{BipartiteNetwork, BipartiteProbaNetwork})  Using the Bastolla et al. (XXXX) measure  Returns three values:   nestedness of the entire matrix  nestedness of the columns  nestedness of the rows   source", 
            "title": "Nestedness"
        }, 
        {
            "location": "/nhst/nullmodels/", 
            "text": "Null models\n\n\nEcologicalNetwork\n offers a number of ways to draw random binary networks from a template of probabilities. This is useful to generate networks under a null model, for example. All these functions will respect the fact that the network in bipartite or unipartite.\n\n\n\n\nCreating a deterministic network from a probabilistic network\n\n\nThere are a number of ways to generate a deterministic network from a probabilistic one. All of these functions take a network on a class belonging to \nProbabilisticNetwork\n, and return a network of a class belonging to \nDeterministicNetwork\n.\n\n\n\n\nConvert to deterministic\n\n\nThe first is simply to assing \ntrue\n to all interactions with a non-0 probability, and \nfalse\n to the others. This is done with the \nmake_binary\n function:\n\n\nN\n \n=\n \nUnipartiteProbaNetwork\n(\neye\n(\n3\n))\n\n\nB\n \n=\n \nmake_binary\n(\nN\n)\n\n\nB\n.\nA\n\n\n\n\n\n\n3\u00d73 Array{Bool,2}:\n  true  false  false\n false   true  false\n false  false   true\n\n\n\n\n\n#\n\n\nEcologicalNetwork.make_binary\n \n \nFunction\n.\n\n\nReturns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is greater than 0.\n\n\nsource\n\n\n\n\nUsing a threshold\n\n\nThe second way is to determine a cutoff for probabilities, below which they will be assigned \nfalse\n. This is done through \nmake_threshold\n:\n\n\nN\n \n=\n \nUnipartiteProbaNetwork\n(\nrand\n((\n4\n,\n \n4\n)))\n\n\nB\n \n=\n \nmake_threshold\n(\nN\n,\n \n0.5\n)\n\n\nB\n.\nA\n\n\n\n\n\n\n4\u00d74 Array{Bool,2}:\n  true   true  false  false\n  true   true  false   true\n false  false  false   true\n false   true  false   true\n\n\n\n\n\n#\n\n\nEcologicalNetwork.make_threshold\n \n \nFunction\n.\n\n\nReturns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is \n \nk\n. This is probably unwise to use this function since this practice is of questionnable relevance, but it is included for the sake of exhaustivity.\n\n\nk\n must be in [0;1[.\n\n\nsource\n\n\n\n\nRandom draws\n\n\nThe last way to convert a probabilistic network to a deterministic one is to perform one random draw for each interaction. In this scenario, \ntrue\n is assigned with a probability $P_{ij}$. This is done with the \nmake_bernoulli\n function:\n\n\nN\n \n=\n \nBipartiteProbaNetwork\n(\nrand\n((\n4\n,\n \n4\n)))\n\n\nB\n \n=\n \nmake_bernoulli\n(\nN\n)\n\n\nB\n.\nA\n\n\n\n\n\n\n4\u00d74 Array{Bool,2}:\n false   true   true  false\n  true   true  false   true\n  true  false   true  false\n  true   true  false  false\n\n\n\n\n\n#\n\n\nEcologicalNetwork.make_bernoulli\n \n \nFunction\n.\n\n\nReturns a matrix B of the same size as A, in which each element B(i,j) is 1 with probability A(i,j).\n\n\nsource\n\n\n\n\nCreating a probabilistic network from a deterministic network\n\n\nThe inverse operation can be done using the \nnullX\n functions. These functions use informations about the degree distribution to generate probabilistic networks:\n\n\n#\n\n\nEcologicalNetwork.null1\n \n \nFunction\n.\n\n\nType I null model\n\n\nnull1(N::DeterministicNetwork)\n\n\n\n\n\nGiven a matrix \nA\n, \nnull1(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the connectance of \nA\n.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.null2\n \n \nFunction\n.\n\n\nType II null model\n\n\nnull2(N::DeterministicNetwork)\n\n\n\n\n\nGiven a matrix \nA\n, \nnull2(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the degree of each species.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.null3in\n \n \nFunction\n.\n\n\nType IIIin null model\n\n\nnull3in(N::DeterministicNetwork)\n\n\n\n\n\nGiven a matrix \nA\n, \nnull3in(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the in-degree (number of predecessors) of each species, divided by the total number of possible predecessors.\n\n\nsource\n\n\n#\n\n\nEcologicalNetwork.null3out\n \n \nFunction\n.\n\n\nType IIIout null model\n\n\nnull3out(N::DeterministicNetwork)\n\n\n\n\n\nGiven a matrix \nA\n, \nnull3out(A)\n returns a matrix with the same dimensions, where every interaction happens with a probability equal to the out-degree (number of successors) of each species, divided by the total number of possible successors.\n\n\nsource\n\n\nFor an example:\n\n\nN\n \n=\n \nmake_bernoulli\n(\nBipartiteProbaNetwork\n(\nrand\n(\n3\n,\n \n5\n)))\n\n\nnull2\n(\nN\n)\n.\nA\n\n\n\n\n\n\n3\u00d75 Array{Float64,2}:\n 0.366667  0.366667  0.7  0.533333  0.533333\n 0.566667  0.566667  0.9  0.733333  0.733333\n 0.466667  0.466667  0.8  0.633333  0.633333\n\n\n\n\n\n\n\nNull model wrapper\n\n\nEcologicalNetwork\n has a wrapper to generate an arbitrary number of Bernoulli networks from a probability matrix. This approach is encourage over simply generating your own networks, because the wrapper will make sure that all networks have no species without any interactions. This ensures that the networks have the same size.\n\n\nFor example, we can generate a hundred replicates from the \nstony\n food web dataset, using the type 2 model:\n\n\ntemplate\n \n=\n \nnull2\n(\nstony\n())\n\n\n\n# Generate up to 100 networks\n\n\nN\n \n=\n \nnullmodel\n(\ntemplate\n,\n \nn\n=\n100\n,\n \nmax\n=\n1000\n)\n\n\n\n# Average connectance\n\n\nmean\n(\nmap\n(\nconnectance\n,\n \nN\n))\n\n\n\n\n\n\n0.0664485012755102\n\n\n\n\n\nIt must be noted that the number of networks returned by \nnullmodel\n may be \nlower\n than the requested number of networks. This is because of the constraint on the fact that no species can end up without interactions. When this constrained is enforced, some networks have very low success rates. This can be measured using the \nspecies_is_free\n function:\n\n\ntemplate\n \n=\n \nnull2\n(\nmcmullen\n())\n\n\n\n# Probability that every species has at least one interaction\n\n\nat_least_one\n \n=\n \n1.\n-\nspecies_is_free\n(\nmake_unipartite\n(\ntemplate\n))\n\n\n\n# Probability that a randomized network has no unconnected species\n\n\nprod\n(\nat_least_one\n)\n\n\n\n\n\n\n1.1674941263628132e-10\n\n\n\n\n\n#\n\n\nEcologicalNetwork.nullmodel\n \n \nFunction\n.\n\n\nGeneration of random matrices from a null model\n\n\nnullmodel\n(\nN\n::\nProbabilisticNetwork\n;\n \nn\n=\n1000\n,\n \nmax\n=\n10000\n)\n\n\n\n\n\n\nThis function is a wrapper to generate replicated binary matrices from a template probability matrix \nA\n.\n\n\nIf you use julia on more than one CPU, \ni.e.\n if you started it with \njulia -p k\n where \nk\n is more than 1, this function will distribute each trial to one worker. Which means that it's fast.\n\n\n\n\nn\n (def. 1000), number of replicates to generate\n\n\nmax\n (def. 10000), number of trials to make\n\n\n\n\nsource", 
            "title": "Probabilistic null models"
        }, 
        {
            "location": "/nhst/nullmodels/#null-models", 
            "text": "EcologicalNetwork  offers a number of ways to draw random binary networks from a template of probabilities. This is useful to generate networks under a null model, for example. All these functions will respect the fact that the network in bipartite or unipartite.", 
            "title": "Null models"
        }, 
        {
            "location": "/nhst/nullmodels/#creating-a-deterministic-network-from-a-probabilistic-network", 
            "text": "There are a number of ways to generate a deterministic network from a probabilistic one. All of these functions take a network on a class belonging to  ProbabilisticNetwork , and return a network of a class belonging to  DeterministicNetwork .", 
            "title": "Creating a deterministic network from a probabilistic network"
        }, 
        {
            "location": "/nhst/nullmodels/#convert-to-deterministic", 
            "text": "The first is simply to assing  true  to all interactions with a non-0 probability, and  false  to the others. This is done with the  make_binary  function:  N   =   UnipartiteProbaNetwork ( eye ( 3 ))  B   =   make_binary ( N )  B . A   3\u00d73 Array{Bool,2}:\n  true  false  false\n false   true  false\n false  false   true  #  EcologicalNetwork.make_binary     Function .  Returns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is greater than 0.  source", 
            "title": "Convert to deterministic"
        }, 
        {
            "location": "/nhst/nullmodels/#using-a-threshold", 
            "text": "The second way is to determine a cutoff for probabilities, below which they will be assigned  false . This is done through  make_threshold :  N   =   UnipartiteProbaNetwork ( rand (( 4 ,   4 )))  B   =   make_threshold ( N ,   0.5 )  B . A   4\u00d74 Array{Bool,2}:\n  true   true  false  false\n  true   true  false   true\n false  false  false   true\n false   true  false   true  #  EcologicalNetwork.make_threshold     Function .  Returns a matrix B of the same size as A, in which each element B(i,j) is 1 if A(i,j) is    k . This is probably unwise to use this function since this practice is of questionnable relevance, but it is included for the sake of exhaustivity.  k  must be in [0;1[.  source", 
            "title": "Using a threshold"
        }, 
        {
            "location": "/nhst/nullmodels/#random-draws", 
            "text": "The last way to convert a probabilistic network to a deterministic one is to perform one random draw for each interaction. In this scenario,  true  is assigned with a probability $P_{ij}$. This is done with the  make_bernoulli  function:  N   =   BipartiteProbaNetwork ( rand (( 4 ,   4 )))  B   =   make_bernoulli ( N )  B . A   4\u00d74 Array{Bool,2}:\n false   true   true  false\n  true   true  false   true\n  true  false   true  false\n  true   true  false  false  #  EcologicalNetwork.make_bernoulli     Function .  Returns a matrix B of the same size as A, in which each element B(i,j) is 1 with probability A(i,j).  source", 
            "title": "Random draws"
        }, 
        {
            "location": "/nhst/nullmodels/#creating-a-probabilistic-network-from-a-deterministic-network", 
            "text": "The inverse operation can be done using the  nullX  functions. These functions use informations about the degree distribution to generate probabilistic networks:  #  EcologicalNetwork.null1     Function .  Type I null model  null1(N::DeterministicNetwork)  Given a matrix  A ,  null1(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the connectance of  A .  source  #  EcologicalNetwork.null2     Function .  Type II null model  null2(N::DeterministicNetwork)  Given a matrix  A ,  null2(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the degree of each species.  source  #  EcologicalNetwork.null3in     Function .  Type IIIin null model  null3in(N::DeterministicNetwork)  Given a matrix  A ,  null3in(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the in-degree (number of predecessors) of each species, divided by the total number of possible predecessors.  source  #  EcologicalNetwork.null3out     Function .  Type IIIout null model  null3out(N::DeterministicNetwork)  Given a matrix  A ,  null3out(A)  returns a matrix with the same dimensions, where every interaction happens with a probability equal to the out-degree (number of successors) of each species, divided by the total number of possible successors.  source  For an example:  N   =   make_bernoulli ( BipartiteProbaNetwork ( rand ( 3 ,   5 )))  null2 ( N ) . A   3\u00d75 Array{Float64,2}:\n 0.366667  0.366667  0.7  0.533333  0.533333\n 0.566667  0.566667  0.9  0.733333  0.733333\n 0.466667  0.466667  0.8  0.633333  0.633333", 
            "title": "Creating a probabilistic network from a deterministic network"
        }, 
        {
            "location": "/nhst/nullmodels/#null-model-wrapper", 
            "text": "EcologicalNetwork  has a wrapper to generate an arbitrary number of Bernoulli networks from a probability matrix. This approach is encourage over simply generating your own networks, because the wrapper will make sure that all networks have no species without any interactions. This ensures that the networks have the same size.  For example, we can generate a hundred replicates from the  stony  food web dataset, using the type 2 model:  template   =   null2 ( stony ())  # Generate up to 100 networks  N   =   nullmodel ( template ,   n = 100 ,   max = 1000 )  # Average connectance  mean ( map ( connectance ,   N ))   0.0664485012755102  It must be noted that the number of networks returned by  nullmodel  may be  lower  than the requested number of networks. This is because of the constraint on the fact that no species can end up without interactions. When this constrained is enforced, some networks have very low success rates. This can be measured using the  species_is_free  function:  template   =   null2 ( mcmullen ())  # Probability that every species has at least one interaction  at_least_one   =   1. - species_is_free ( make_unipartite ( template ))  # Probability that a randomized network has no unconnected species  prod ( at_least_one )   1.1674941263628132e-10  #  EcologicalNetwork.nullmodel     Function .  Generation of random matrices from a null model  nullmodel ( N :: ProbabilisticNetwork ;   n = 1000 ,   max = 10000 )   This function is a wrapper to generate replicated binary matrices from a template probability matrix  A .  If you use julia on more than one CPU,  i.e.  if you started it with  julia -p k  where  k  is more than 1, this function will distribute each trial to one worker. Which means that it's fast.   n  (def. 1000), number of replicates to generate  max  (def. 10000), number of trials to make   source", 
            "title": "Null model wrapper"
        }, 
        {
            "location": "/nhst/swaps/", 
            "text": "Network permutations\n\n\nAs opposed to re-generating networks from a template of probabilities, network permutations shuffles interactions within a network. This is done by enforcing different constraints on degree distribution: either only the fill is maintained, or only the in or out degree, or both.\n\n\n#\n\n\nEcologicalNetwork.swaps\n \n \nFunction\n.\n\n\nGenerates permutations of a network\n\n\nswaps\n(\nN\n::\nDeterministicNetwork\n,\n \nr\n::\nInt64\n;\n \nconstraint\n::\nSymbol\n=\n:\ndegree\n,\n \nswapsize\n::\nInt64\n=\n3\n,\n \nn\n::\nInt64\n=\n3000\n)\n\n\n\n\n\n\nBy default, this method will look for random (x, x) sub-matrices, where x is given by the \nswapsize\n keyword, and shuffle them. There are four possible constraints:\n\n\n\n\n\n\n\n\nvalue\n\n\nmeaning\n\n\nproba equivalent\n\n\n\n\n\n\n\n\n\n\n:degree\n\n\nboth in and out degree\n\n\nnull2\n\n\n\n\n\n\n:generality\n\n\nonly out degree\n\n\nnull3out\n\n\n\n\n\n\n:vulnerability\n\n\nonly in degree\n\n\nnull3in\n\n\n\n\n\n\n:fill\n\n\nonly number of links\n\n\nnull1\n\n\n\n\n\n\n\n\nArguments:\n\n\n\n\nN\n, a \nDeterministicNetwork\n\n\nr\n, the number of randomized networks to generate\n\n\n\n\nKeywords:\n\n\n\n\nconstraint\n: can be \n:degree\n, \n:generality\n, \n:vulnerability\n, or \n:fill\n\n\nswapsize\n: the size of the square sub-matrix to swap (defaults to 3)\n\n\nn\n: the number of sub-matrices to swap (defaults to 3000)\n\n\n\n\nsource\n\n\nIt is also possible to produce a single permutation of a network if needed.\n\n\n#\n\n\nEcologicalNetwork.swap\n \n \nFunction\n.\n\n\nSwaps a unipartite network while enforcing a constraint on degree distribution.\n\n\nsource\n\n\nGenerate a single permutation of a network\n\n\nswap\n(\nN\n::\nBipartiteNetwork\n;\n \nconstraint\n::\nSymbol\n=\n:\ndegree\n,\n \nswapsize\n::\nInt64\n=\n3\n,\n \nn\n::\nInt64\n=\n3000\n)\n\n\n\n\n\n\nSwaps a bipartite network while enforcing a constraint on degree distribution. See the documentation for \nswaps\n for the complete explanation of arguments.\n\n\nsource", 
            "title": "Network permutations"
        }, 
        {
            "location": "/nhst/swaps/#network-permutations", 
            "text": "As opposed to re-generating networks from a template of probabilities, network permutations shuffles interactions within a network. This is done by enforcing different constraints on degree distribution: either only the fill is maintained, or only the in or out degree, or both.  #  EcologicalNetwork.swaps     Function .  Generates permutations of a network  swaps ( N :: DeterministicNetwork ,   r :: Int64 ;   constraint :: Symbol = : degree ,   swapsize :: Int64 = 3 ,   n :: Int64 = 3000 )   By default, this method will look for random (x, x) sub-matrices, where x is given by the  swapsize  keyword, and shuffle them. There are four possible constraints:     value  meaning  proba equivalent      :degree  both in and out degree  null2    :generality  only out degree  null3out    :vulnerability  only in degree  null3in    :fill  only number of links  null1     Arguments:   N , a  DeterministicNetwork  r , the number of randomized networks to generate   Keywords:   constraint : can be  :degree ,  :generality ,  :vulnerability , or  :fill  swapsize : the size of the square sub-matrix to swap (defaults to 3)  n : the number of sub-matrices to swap (defaults to 3000)   source  It is also possible to produce a single permutation of a network if needed.  #  EcologicalNetwork.swap     Function .  Swaps a unipartite network while enforcing a constraint on degree distribution.  source  Generate a single permutation of a network  swap ( N :: BipartiteNetwork ;   constraint :: Symbol = : degree ,   swapsize :: Int64 = 3 ,   n :: Int64 = 3000 )   Swaps a bipartite network while enforcing a constraint on degree distribution. See the documentation for  swaps  for the complete explanation of arguments.  source", 
            "title": "Network permutations"
        }, 
        {
            "location": "/nhst/nhst/", 
            "text": "Null Hypothesis Significance Testing\n\n\nNHST is used to determine whether the observed value of a network measure is larger, or smaller, or similar to, what is expected by chance. The function to perform a test is typically applied after you have generated randomized networks using either null models or network permutations.\n\n\n#\n\n\nEcologicalNetwork.test_network_property\n \n \nFunction\n.\n\n\nNull Hypothesis Significance Testing\n\n\ntest_network_property\n(\nN\n::\nEcoNetwork\n,\n \nf\n,\n \nS\n;\n \ntest\n::\nSymbol\n=\n:\ngreater\n)\n\n\n\n\n\n\nTest whether the observed value (through applying a function \nf\n) on an empirical network \nN\n differs from the distribution derived from measuring the same value on a collection of randomized networks \nS\n. \nS\n is an array of networks of the same type as \nN\n.\n\n\nThere are two possible values for the \ntest\n keyword argument: \n:greater\n and \n:smaller\n. The test is one-tailed. The results are returned as a \nNetworkTestOutput\n object (see \n?EcologicalNetwork.NetworkTestOutput\n for the complete edocumentation).\n\n\nThe \np\n-value (\npval\n) is measured by counting the proportion of networks with a larger (resp. smaller) value of the measure than the original network, as in normal permutation tests.\n\n\nThe original value of the measure is given (\nv0\n), as well as the \nz\n-scores (\nz\n) of all randomized networks.\n\n\nsource\n\n\nThe output is a \nNetworkTestOutput\n object, with a number of fields.\n\n\n#\n\n\nEcologicalNetwork.NetworkTestOutput\n \n \nType\n.\n\n\nOutput of a permutation-based test\n\n\n\n\npval\n \u2013 the test p-value\n\n\ntest\n \u2013 the type of test (\n:smaller\n or \n:greater\n)\n\n\nv0\n \u2013 the measure of the empirical network\n\n\nn\n \u2013 the number of randomized networks used\n\n\nhits\n \u2013 the number of randomized network matching the test condition\n\n\nz\n \u2013 the \nz\n-scores of the statistics for each randomized network\n\n\n\n\nsource", 
            "title": "Null Hypothesis Significance Testing"
        }, 
        {
            "location": "/nhst/nhst/#null-hypothesis-significance-testing", 
            "text": "NHST is used to determine whether the observed value of a network measure is larger, or smaller, or similar to, what is expected by chance. The function to perform a test is typically applied after you have generated randomized networks using either null models or network permutations.  #  EcologicalNetwork.test_network_property     Function .  Null Hypothesis Significance Testing  test_network_property ( N :: EcoNetwork ,   f ,   S ;   test :: Symbol = : greater )   Test whether the observed value (through applying a function  f ) on an empirical network  N  differs from the distribution derived from measuring the same value on a collection of randomized networks  S .  S  is an array of networks of the same type as  N .  There are two possible values for the  test  keyword argument:  :greater  and  :smaller . The test is one-tailed. The results are returned as a  NetworkTestOutput  object (see  ?EcologicalNetwork.NetworkTestOutput  for the complete edocumentation).  The  p -value ( pval ) is measured by counting the proportion of networks with a larger (resp. smaller) value of the measure than the original network, as in normal permutation tests.  The original value of the measure is given ( v0 ), as well as the  z -scores ( z ) of all randomized networks.  source  The output is a  NetworkTestOutput  object, with a number of fields.  #  EcologicalNetwork.NetworkTestOutput     Type .  Output of a permutation-based test   pval  \u2013 the test p-value  test  \u2013 the type of test ( :smaller  or  :greater )  v0  \u2013 the measure of the empirical network  n  \u2013 the number of randomized networks used  hits  \u2013 the number of randomized network matching the test condition  z  \u2013 the  z -scores of the statistics for each randomized network   source", 
            "title": "Null Hypothesis Significance Testing"
        }
    ]
}